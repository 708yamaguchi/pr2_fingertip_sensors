
g491_makabe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f4c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800612c  0800612c  0001612c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006218  08006218  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006218  08006218  00016218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006220  08006220  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006220  08006220  00016220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006224  08006224  00016224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f60  20000074  0800629c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fd4  0800629c  00020fd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ed4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d31  00000000  00000000  00033f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001100  00000000  00000000  00036cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa8  00000000  00000000  00037db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000040a6  00000000  00000000  00038d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cf46  00000000  00000000  0003cdfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7d17  00000000  00000000  00049d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00111a5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ac4  00000000  00000000  00111ad8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006114 	.word	0x08006114

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08006114 	.word	0x08006114

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <decomposeDigit>:
/* USER CODE BEGIN 0 */

// PR2に送信したいuint16型の数字を、uint8型の数字2つに分解する。
// 引数のvalは分解元のuint16型の数字
// 引数のdigitは分解された2つ数字のうち上から何番目を取り出すか
uint8_t decomposeDigit(uint16_t val, uint8_t digit){
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	460a      	mov	r2, r1
 800052a:	80fb      	strh	r3, [r7, #6]
 800052c:	4613      	mov	r3, r2
 800052e:	717b      	strb	r3, [r7, #5]
	uint8_t num;
	num = val >> ((1 - digit) * 8);
 8000530:	88fa      	ldrh	r2, [r7, #6]
 8000532:	797b      	ldrb	r3, [r7, #5]
 8000534:	f1c3 0301 	rsb	r3, r3, #1
 8000538:	00db      	lsls	r3, r3, #3
 800053a:	fa42 f303 	asr.w	r3, r2, r3
 800053e:	73fb      	strb	r3, [r7, #15]
	return num;
 8000540:	7bfb      	ldrb	r3, [r7, #15]
}
 8000542:	4618      	mov	r0, r3
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
	...

08000550 <setTxBuffer>:
// 引数のvalは、PR2に送信したいuint16型の数字
// 引数のidxは、PR2のトピック(/pressure/l(r)_gripper_motor)の配列の何番目にvalを格納するか。
// idx = 0, 1, 2, ... 21
// 44個の要素は2個で1つの数字となり、PR2に送信される。
// 1つの数字を2要素に分解するための関数がdecomposeDigit()
void setTxBuffer(uint16_t val, uint8_t idx) {
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	460a      	mov	r2, r1
 800055a:	80fb      	strh	r3, [r7, #6]
 800055c:	4613      	mov	r3, r2
 800055e:	717b      	strb	r3, [r7, #5]
	for(int i = 0; i < 2; i++) {
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	e010      	b.n	8000588 <setTxBuffer+0x38>
	    txBuffer[idx * 2 + i] = decomposeDigit(val, i);
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	b2d9      	uxtb	r1, r3
 800056a:	797b      	ldrb	r3, [r7, #5]
 800056c:	005a      	lsls	r2, r3, #1
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	18d4      	adds	r4, r2, r3
 8000572:	88fb      	ldrh	r3, [r7, #6]
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ffd3 	bl	8000520 <decomposeDigit>
 800057a:	4603      	mov	r3, r0
 800057c:	461a      	mov	r2, r3
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <setTxBuffer+0x48>)
 8000580:	551a      	strb	r2, [r3, r4]
	for(int i = 0; i < 2; i++) {
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	3301      	adds	r3, #1
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2b01      	cmp	r3, #1
 800058c:	ddeb      	ble.n	8000566 <setTxBuffer+0x16>
	}
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	bd90      	pop	{r4, r7, pc}
 8000596:	bf00      	nop
 8000598:	20000094 	.word	0x20000094

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fc3a 	bl	8000e1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f839 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f953 	bl	8000854 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ae:	f000 f91f 	bl	80007f0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005b2:	f000 f89b 	bl	80006ec <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 80005b6:	f000 f8e3 	bl	8000780 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  // /pressure/l(r)_gripper_motor values will be
  // [0, 100, 200, 300, ..., 2100]
  for(int i = 0; i < 22; i++) {
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	e014      	b.n	80005ea <main+0x4e>
	  setTxBuffer(i*100, i);
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	461a      	mov	r2, r3
 80005c6:	0092      	lsls	r2, r2, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	461a      	mov	r2, r3
 80005cc:	0091      	lsls	r1, r2, #2
 80005ce:	461a      	mov	r2, r3
 80005d0:	460b      	mov	r3, r1
 80005d2:	4413      	add	r3, r2
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	697a      	ldr	r2, [r7, #20]
 80005da:	b2d2      	uxtb	r2, r2
 80005dc:	4611      	mov	r1, r2
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ffb6 	bl	8000550 <setTxBuffer>
  for(int i = 0; i < 22; i++) {
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	3301      	adds	r3, #1
 80005e8:	617b      	str	r3, [r7, #20]
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	2b15      	cmp	r3, #21
 80005ee:	dde7      	ble.n	80005c0 <main+0x24>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of SPIslaveTask */
  osThreadDef(SPIslaveTask, StartSPIslaveTask, osPriorityIdle, 0, 128);
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <main+0x78>)
 80005f2:	463c      	mov	r4, r7
 80005f4:	461d      	mov	r5, r3
 80005f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fa:	682b      	ldr	r3, [r5, #0]
 80005fc:	6023      	str	r3, [r4, #0]
  SPIslaveTaskHandle = osThreadCreate(osThread(SPIslaveTask), NULL);
 80005fe:	463b      	mov	r3, r7
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f003 ff85 	bl	8004512 <osThreadCreate>
 8000608:	4602      	mov	r2, r0
 800060a:	4b03      	ldr	r3, [pc, #12]	; (8000618 <main+0x7c>)
 800060c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800060e:	f003 ff79 	bl	8004504 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000612:	e7fe      	b.n	8000612 <main+0x76>
 8000614:	0800613c 	.word	0x0800613c
 8000618:	20000f68 	.word	0x20000f68

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b0a8      	sub	sp, #160	; 0xa0
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000626:	2238      	movs	r2, #56	; 0x38
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f005 f902 	bl	8005834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2250      	movs	r2, #80	; 0x50
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f005 f8f4 	bl	8005834 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800064c:	2000      	movs	r0, #0
 800064e:	f001 f943 	bl	80018d8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800065a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065c:	2340      	movs	r3, #64	; 0x40
 800065e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000660:	2302      	movs	r3, #2
 8000662:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000666:	2302      	movs	r3, #2
 8000668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800066c:	2304      	movs	r3, #4
 800066e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000672:	2355      	movs	r3, #85	; 0x55
 8000674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800068e:	4618      	mov	r0, r3
 8000690:	f001 f9d6 	bl	8001a40 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800069a:	f000 f979 	bl	8000990 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2303      	movs	r3, #3
 80006a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006b6:	2104      	movs	r1, #4
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 fcd9 	bl	8002070 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80006c4:	f000 f964 	bl	8000990 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80006c8:	2320      	movs	r3, #32
 80006ca:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fee8 	bl	80024a8 <HAL_RCCEx_PeriphCLKConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006de:	f000 f957 	bl	8000990 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	37a0      	adds	r7, #160	; 0xa0
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006f0:	4b21      	ldr	r3, [pc, #132]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 80006f2:	4a22      	ldr	r2, [pc, #136]	; (800077c <MX_LPUART1_UART_Init+0x90>)
 80006f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800070a:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 8000724:	2200      	movs	r2, #0
 8000726:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 800072a:	2200      	movs	r2, #0
 800072c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800072e:	4812      	ldr	r0, [pc, #72]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 8000730:	f003 f926 	bl	8003980 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f929 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800073e:	2100      	movs	r1, #0
 8000740:	480d      	ldr	r0, [pc, #52]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 8000742:	f003 fde2 	bl	800430a <HAL_UARTEx_SetTxFifoThreshold>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800074c:	f000 f920 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000750:	2100      	movs	r1, #0
 8000752:	4809      	ldr	r0, [pc, #36]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 8000754:	f003 fe17 	bl	8004386 <HAL_UARTEx_SetRxFifoThreshold>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800075e:	f000 f917 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 8000764:	f003 fd98 	bl	8004298 <HAL_UARTEx_DisableFifoMode>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800076e:	f000 f90f 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000edc 	.word	0x20000edc
 800077c:	40008000 	.word	0x40008000

08000780 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_SPI2_Init+0x68>)
 8000786:	4a19      	ldr	r2, [pc, #100]	; (80007ec <MX_SPI2_Init+0x6c>)
 8000788:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_SPI2_Init+0x68>)
 800078c:	2200      	movs	r2, #0
 800078e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_SPI2_Init+0x68>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_SPI2_Init+0x68>)
 8000798:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800079c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_SPI2_Init+0x68>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_SPI2_Init+0x68>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_SPI2_Init+0x68>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <MX_SPI2_Init+0x68>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_SPI2_Init+0x68>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <MX_SPI2_Init+0x68>)
 80007be:	2200      	movs	r2, #0
 80007c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_SPI2_Init+0x68>)
 80007c4:	2207      	movs	r2, #7
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <MX_SPI2_Init+0x68>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_SPI2_Init+0x68>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_SPI2_Init+0x68>)
 80007d6:	f002 f8a3 	bl	8002920 <HAL_SPI_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 80007e0:	f000 f8d6 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000e18 	.word	0x20000e18
 80007ec:	40003800 	.word	0x40003800

080007f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_DMA_Init+0x60>)
 80007f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007fa:	4a15      	ldr	r2, [pc, #84]	; (8000850 <MX_DMA_Init+0x60>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6493      	str	r3, [r2, #72]	; 0x48
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_DMA_Init+0x60>)
 8000804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_DMA_Init+0x60>)
 8000810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000812:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <MX_DMA_Init+0x60>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6493      	str	r3, [r2, #72]	; 0x48
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <MX_DMA_Init+0x60>)
 800081c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2105      	movs	r1, #5
 800082a:	200b      	movs	r0, #11
 800082c:	f000 fc41 	bl	80010b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000830:	200b      	movs	r0, #11
 8000832:	f000 fc58 	bl	80010e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2105      	movs	r1, #5
 800083a:	200c      	movs	r0, #12
 800083c:	f000 fc39 	bl	80010b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000840:	200c      	movs	r0, #12
 8000842:	f000 fc50 	bl	80010e6 <HAL_NVIC_EnableIRQ>

}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b2f      	ldr	r3, [pc, #188]	; (8000928 <MX_GPIO_Init+0xd4>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a2e      	ldr	r2, [pc, #184]	; (8000928 <MX_GPIO_Init+0xd4>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b2c      	ldr	r3, [pc, #176]	; (8000928 <MX_GPIO_Init+0xd4>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000882:	4b29      	ldr	r3, [pc, #164]	; (8000928 <MX_GPIO_Init+0xd4>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a28      	ldr	r2, [pc, #160]	; (8000928 <MX_GPIO_Init+0xd4>)
 8000888:	f043 0320 	orr.w	r3, r3, #32
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b26      	ldr	r3, [pc, #152]	; (8000928 <MX_GPIO_Init+0xd4>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0320 	and.w	r3, r3, #32
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <MX_GPIO_Init+0xd4>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	4a22      	ldr	r2, [pc, #136]	; (8000928 <MX_GPIO_Init+0xd4>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <MX_GPIO_Init+0xd4>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <MX_GPIO_Init+0xd4>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a1c      	ldr	r2, [pc, #112]	; (8000928 <MX_GPIO_Init+0xd4>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_GPIO_Init+0xd4>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2120      	movs	r1, #32
 80008ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d2:	f000 ffc5 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_GPIO_Init+0xd8>)
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	4811      	ldr	r0, [pc, #68]	; (8000930 <MX_GPIO_Init+0xdc>)
 80008ec:	f000 fe36 	bl	800155c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008f0:	2320      	movs	r3, #32
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090a:	f000 fe27 	bl	800155c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2105      	movs	r1, #5
 8000912:	2028      	movs	r0, #40	; 0x28
 8000914:	f000 fbcd 	bl	80010b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000918:	2028      	movs	r0, #40	; 0x28
 800091a:	f000 fbe4 	bl	80010e6 <HAL_NVIC_EnableIRQ>

}
 800091e:	bf00      	nop
 8000920:	3728      	adds	r7, #40	; 0x28
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000
 800092c:	10110000 	.word	0x10110000
 8000930:	48000800 	.word	0x48000800

08000934 <StartSPIslaveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartSPIslaveTask(void const * argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if (HAL_SPI_Receive(&hspi2, rxBuffer, 1, 1000) != HAL_OK) {
 800093c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000940:	2201      	movs	r2, #1
 8000942:	490f      	ldr	r1, [pc, #60]	; (8000980 <StartSPIslaveTask+0x4c>)
 8000944:	480f      	ldr	r0, [pc, #60]	; (8000984 <StartSPIslaveTask+0x50>)
 8000946:	f002 fa04 	bl	8002d52 <HAL_SPI_Receive>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d002      	beq.n	8000956 <StartSPIslaveTask+0x22>
		uint8_t dummy = rxBuffer[0];
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <StartSPIslaveTask+0x4c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	73fb      	strb	r3, [r7, #15]
	}
	if(rxBuffer[0] == 0x12){
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <StartSPIslaveTask+0x4c>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b12      	cmp	r3, #18
 800095c:	d10c      	bne.n	8000978 <StartSPIslaveTask+0x44>
		if (HAL_SPI_Transmit(&hspi2, txBuffer, sizeof(txBuffer), 1000) != HAL_OK) {
 800095e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000962:	222c      	movs	r2, #44	; 0x2c
 8000964:	4908      	ldr	r1, [pc, #32]	; (8000988 <StartSPIslaveTask+0x54>)
 8000966:	4807      	ldr	r0, [pc, #28]	; (8000984 <StartSPIslaveTask+0x50>)
 8000968:	f002 f885 	bl	8002a76 <HAL_SPI_Transmit>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d002      	beq.n	8000978 <StartSPIslaveTask+0x44>
			printf("HAL_SPI_Transmit failed.\r\n");
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <StartSPIslaveTask+0x58>)
 8000974:	f004 ffc2 	bl	80058fc <puts>
		}
	}

    osDelay(1);
 8000978:	2001      	movs	r0, #1
 800097a:	f003 fdf1 	bl	8004560 <osDelay>
	if (HAL_SPI_Receive(&hspi2, rxBuffer, 1, 1000) != HAL_OK) {
 800097e:	e7dd      	b.n	800093c <StartSPIslaveTask+0x8>
 8000980:	20000090 	.word	0x20000090
 8000984:	20000e18 	.word	0x20000e18
 8000988:	20000094 	.word	0x20000094
 800098c:	08006150 	.word	0x08006150

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000996:	e7fe      	b.n	8000996 <Error_Handler+0x6>

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_MspInit+0x50>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a2:	4a11      	ldr	r2, [pc, #68]	; (80009e8 <HAL_MspInit+0x50>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6613      	str	r3, [r2, #96]	; 0x60
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_MspInit+0x50>)
 80009ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <HAL_MspInit+0x50>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ba:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <HAL_MspInit+0x50>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6593      	str	r3, [r2, #88]	; 0x58
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_MspInit+0x50>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	210f      	movs	r1, #15
 80009d2:	f06f 0001 	mvn.w	r0, #1
 80009d6:	f000 fb6c 	bl	80010b2 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009da:	f001 f821 	bl	8001a20 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <HAL_UART_MspInit+0x7c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d128      	bne.n	8000a60 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_UART_MspInit+0x80>)
 8000a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a12:	4a16      	ldr	r2, [pc, #88]	; (8000a6c <HAL_UART_MspInit+0x80>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_UART_MspInit+0x80>)
 8000a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_UART_MspInit+0x80>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <HAL_UART_MspInit+0x80>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_UART_MspInit+0x80>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a3e:	230c      	movs	r3, #12
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a4e:	230c      	movs	r3, #12
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f000 fd7e 	bl	800155c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40008000 	.word	0x40008000
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a45      	ldr	r2, [pc, #276]	; (8000ba4 <HAL_SPI_MspInit+0x134>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	f040 8083 	bne.w	8000b9a <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a94:	4b44      	ldr	r3, [pc, #272]	; (8000ba8 <HAL_SPI_MspInit+0x138>)
 8000a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a98:	4a43      	ldr	r2, [pc, #268]	; (8000ba8 <HAL_SPI_MspInit+0x138>)
 8000a9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9e:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa0:	4b41      	ldr	r3, [pc, #260]	; (8000ba8 <HAL_SPI_MspInit+0x138>)
 8000aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aac:	4b3e      	ldr	r3, [pc, #248]	; (8000ba8 <HAL_SPI_MspInit+0x138>)
 8000aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab0:	4a3d      	ldr	r2, [pc, #244]	; (8000ba8 <HAL_SPI_MspInit+0x138>)
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab8:	4b3b      	ldr	r3, [pc, #236]	; (8000ba8 <HAL_SPI_MspInit+0x138>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ac4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4832      	ldr	r0, [pc, #200]	; (8000bac <HAL_SPI_MspInit+0x13c>)
 8000ae2:	f000 fd3b 	bl	800155c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel1;
 8000ae6:	4b32      	ldr	r3, [pc, #200]	; (8000bb0 <HAL_SPI_MspInit+0x140>)
 8000ae8:	4a32      	ldr	r2, [pc, #200]	; (8000bb4 <HAL_SPI_MspInit+0x144>)
 8000aea:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8000aec:	4b30      	ldr	r3, [pc, #192]	; (8000bb0 <HAL_SPI_MspInit+0x140>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000af2:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <HAL_SPI_MspInit+0x140>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af8:	4b2d      	ldr	r3, [pc, #180]	; (8000bb0 <HAL_SPI_MspInit+0x140>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000afe:	4b2c      	ldr	r3, [pc, #176]	; (8000bb0 <HAL_SPI_MspInit+0x140>)
 8000b00:	2280      	movs	r2, #128	; 0x80
 8000b02:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b04:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <HAL_SPI_MspInit+0x140>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b0a:	4b29      	ldr	r3, [pc, #164]	; (8000bb0 <HAL_SPI_MspInit+0x140>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000b10:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <HAL_SPI_MspInit+0x140>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b16:	4b26      	ldr	r3, [pc, #152]	; (8000bb0 <HAL_SPI_MspInit+0x140>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000b1c:	4824      	ldr	r0, [pc, #144]	; (8000bb0 <HAL_SPI_MspInit+0x140>)
 8000b1e:	f000 fafd 	bl	800111c <HAL_DMA_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8000b28:	f7ff ff32 	bl	8000990 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a20      	ldr	r2, [pc, #128]	; (8000bb0 <HAL_SPI_MspInit+0x140>)
 8000b30:	659a      	str	r2, [r3, #88]	; 0x58
 8000b32:	4a1f      	ldr	r2, [pc, #124]	; (8000bb0 <HAL_SPI_MspInit+0x140>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel2;
 8000b38:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <HAL_SPI_MspInit+0x148>)
 8000b3a:	4a20      	ldr	r2, [pc, #128]	; (8000bbc <HAL_SPI_MspInit+0x14c>)
 8000b3c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <HAL_SPI_MspInit+0x148>)
 8000b40:	220d      	movs	r2, #13
 8000b42:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b44:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <HAL_SPI_MspInit+0x148>)
 8000b46:	2210      	movs	r2, #16
 8000b48:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b4a:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <HAL_SPI_MspInit+0x148>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b50:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <HAL_SPI_MspInit+0x148>)
 8000b52:	2280      	movs	r2, #128	; 0x80
 8000b54:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_SPI_MspInit+0x148>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <HAL_SPI_MspInit+0x148>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_SPI_MspInit+0x148>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <HAL_SPI_MspInit+0x148>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000b6e:	4812      	ldr	r0, [pc, #72]	; (8000bb8 <HAL_SPI_MspInit+0x148>)
 8000b70:	f000 fad4 	bl	800111c <HAL_DMA_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8000b7a:	f7ff ff09 	bl	8000990 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a0d      	ldr	r2, [pc, #52]	; (8000bb8 <HAL_SPI_MspInit+0x148>)
 8000b82:	655a      	str	r2, [r3, #84]	; 0x54
 8000b84:	4a0c      	ldr	r2, [pc, #48]	; (8000bb8 <HAL_SPI_MspInit+0x148>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2105      	movs	r1, #5
 8000b8e:	2024      	movs	r0, #36	; 0x24
 8000b90:	f000 fa8f 	bl	80010b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000b94:	2024      	movs	r0, #36	; 0x24
 8000b96:	f000 faa6 	bl	80010e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40003800 	.word	0x40003800
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	20000e7c 	.word	0x20000e7c
 8000bb4:	40020008 	.word	0x40020008
 8000bb8:	20000f6c 	.word	0x20000f6c
 8000bbc:	4002001c 	.word	0x4002001c

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <UsageFault_Handler+0x4>

08000bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf0:	f000 f966 	bl	8000ec0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bf4:	f004 f998 	bl	8004f28 <xTaskGetSchedulerState>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d001      	beq.n	8000c02 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bfe:	f004 fbcb 	bl	8005398 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <DMA1_Channel1_IRQHandler+0x10>)
 8000c0e:	f000 fb94 	bl	800133a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000e7c 	.word	0x20000e7c

08000c1c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <DMA1_Channel2_IRQHandler+0x10>)
 8000c22:	f000 fb8a 	bl	800133a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000f6c 	.word	0x20000f6c

08000c30 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <SPI2_IRQHandler+0x10>)
 8000c36:	f002 fbcf 	bl	80033d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000e18 	.word	0x20000e18

08000c44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c4c:	f000 fe20 	bl	8001890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	e00a      	b.n	8000c7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c66:	f3af 8000 	nop.w
 8000c6a:	4601      	mov	r1, r0
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	60ba      	str	r2, [r7, #8]
 8000c72:	b2ca      	uxtb	r2, r1
 8000c74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dbf0      	blt.n	8000c66 <_read+0x12>
	}

return len;
 8000c84:	687b      	ldr	r3, [r7, #4]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	60f8      	str	r0, [r7, #12]
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	e009      	b.n	8000cb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	60ba      	str	r2, [r7, #8]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbf1      	blt.n	8000ca0 <_write+0x12>
	}
	return len;
 8000cbc:	687b      	ldr	r3, [r7, #4]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_close>:

int _close(int file)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
	return -1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cee:	605a      	str	r2, [r3, #4]
	return 0;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <_isatty>:

int _isatty(int file)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
	return 1;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d207      	bcs.n	8000d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d60:	f004 fd3e 	bl	80057e0 <__errno>
 8000d64:	4602      	mov	r2, r0
 8000d66:	230c      	movs	r3, #12
 8000d68:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <_sbrk+0x64>)
 8000d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2001c000 	.word	0x2001c000
 8000d90:	00000400 	.word	0x00000400
 8000d94:	200000c0 	.word	0x200000c0
 8000d98:	20000fd8 	.word	0x20000fd8

08000d9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <SystemInit+0x28>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <SystemInit+0x28>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SystemInit+0x28>)
 8000db2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000db6:	609a      	str	r2, [r3, #8]
#endif
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dce:	490e      	ldr	r1, [pc, #56]	; (8000e08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd0:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <LoopForever+0xe>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de4:	4c0b      	ldr	r4, [pc, #44]	; (8000e14 <LoopForever+0x16>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000df2:	f7ff ffd3 	bl	8000d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df6:	f004 fcf9 	bl	80057ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dfa:	f7ff fbcf 	bl	800059c <main>

08000dfe <LoopForever>:

LoopForever:
    b LoopForever
 8000dfe:	e7fe      	b.n	8000dfe <LoopForever>
  ldr   r0, =_estack
 8000e00:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e0c:	08006228 	.word	0x08006228
  ldr r2, =_sbss
 8000e10:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e14:	20000fd4 	.word	0x20000fd4

08000e18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC1_2_IRQHandler>

08000e1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 f939 	bl	800109c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e2a:	200f      	movs	r0, #15
 8000e2c:	f000 f80e 	bl	8000e4c <HAL_InitTick>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d002      	beq.n	8000e3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	71fb      	strb	r3, [r7, #7]
 8000e3a:	e001      	b.n	8000e40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e3c:	f7ff fdac 	bl	8000998 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e40:	79fb      	ldrb	r3, [r7, #7]

}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e58:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <HAL_InitTick+0x68>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d022      	beq.n	8000ea6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_InitTick+0x6c>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <HAL_InitTick+0x68>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 f944 	bl	8001102 <HAL_SYSTICK_Config>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10f      	bne.n	8000ea0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b0f      	cmp	r3, #15
 8000e84:	d809      	bhi.n	8000e9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e86:	2200      	movs	r2, #0
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e8e:	f000 f910 	bl	80010b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <HAL_InitTick+0x70>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	e007      	b.n	8000eaa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	73fb      	strb	r3, [r7, #15]
 8000e9e:	e004      	b.n	8000eaa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	73fb      	strb	r3, [r7, #15]
 8000ea4:	e001      	b.n	8000eaa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <HAL_IncTick+0x1c>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <HAL_IncTick+0x20>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4413      	add	r3, r2
 8000ece:	4a03      	ldr	r2, [pc, #12]	; (8000edc <HAL_IncTick+0x1c>)
 8000ed0:	6013      	str	r3, [r2, #0]
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	20000fcc 	.word	0x20000fcc
 8000ee0:	20000008 	.word	0x20000008

08000ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_GetTick+0x14>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000fcc 	.word	0x20000fcc

08000efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db0b      	blt.n	8000f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f003 021f 	and.w	r2, r3, #31
 8000f78:	4907      	ldr	r1, [pc, #28]	; (8000f98 <__NVIC_EnableIRQ+0x38>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	2001      	movs	r0, #1
 8000f82:	fa00 f202 	lsl.w	r2, r0, r2
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	; (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001068:	d301      	bcc.n	800106e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106a:	2301      	movs	r3, #1
 800106c:	e00f      	b.n	800108e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <SysTick_Config+0x40>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001076:	210f      	movs	r1, #15
 8001078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800107c:	f7ff ff8e 	bl	8000f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <SysTick_Config+0x40>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <SysTick_Config+0x40>)
 8001088:	2207      	movs	r2, #7
 800108a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	e000e010 	.word	0xe000e010

0800109c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff29 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010c0:	f7ff ff40 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 80010c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f7ff ff90 	bl	8000ff0 <NVIC_EncodePriority>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5f 	bl	8000f9c <__NVIC_SetPriority>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff33 	bl	8000f60 <__NVIC_EnableIRQ>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffa4 	bl	8001058 <SysTick_Config>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e08d      	b.n	800124a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	4b47      	ldr	r3, [pc, #284]	; (8001254 <HAL_DMA_Init+0x138>)
 8001136:	429a      	cmp	r2, r3
 8001138:	d80f      	bhi.n	800115a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	4b45      	ldr	r3, [pc, #276]	; (8001258 <HAL_DMA_Init+0x13c>)
 8001142:	4413      	add	r3, r2
 8001144:	4a45      	ldr	r2, [pc, #276]	; (800125c <HAL_DMA_Init+0x140>)
 8001146:	fba2 2303 	umull	r2, r3, r2, r3
 800114a:	091b      	lsrs	r3, r3, #4
 800114c:	009a      	lsls	r2, r3, #2
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a42      	ldr	r2, [pc, #264]	; (8001260 <HAL_DMA_Init+0x144>)
 8001156:	641a      	str	r2, [r3, #64]	; 0x40
 8001158:	e00e      	b.n	8001178 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	4b40      	ldr	r3, [pc, #256]	; (8001264 <HAL_DMA_Init+0x148>)
 8001162:	4413      	add	r3, r2
 8001164:	4a3d      	ldr	r2, [pc, #244]	; (800125c <HAL_DMA_Init+0x140>)
 8001166:	fba2 2303 	umull	r2, r3, r2, r3
 800116a:	091b      	lsrs	r3, r3, #4
 800116c:	009a      	lsls	r2, r3, #2
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a3c      	ldr	r2, [pc, #240]	; (8001268 <HAL_DMA_Init+0x14c>)
 8001176:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2202      	movs	r2, #2
 800117c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800118e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001192:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800119c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 f964 	bl	8001498 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011d8:	d102      	bne.n	80011e0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011f4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d010      	beq.n	8001220 <HAL_DMA_Init+0x104>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b04      	cmp	r3, #4
 8001204:	d80c      	bhi.n	8001220 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 f984 	bl	8001514 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	e008      	b.n	8001232 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2201      	movs	r2, #1
 800123c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40020407 	.word	0x40020407
 8001258:	bffdfff8 	.word	0xbffdfff8
 800125c:	cccccccd 	.word	0xcccccccd
 8001260:	40020000 	.word	0x40020000
 8001264:	bffdfbf8 	.word	0xbffdfbf8
 8001268:	40020400 	.word	0x40020400

0800126c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d00d      	beq.n	80012a0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2204      	movs	r2, #4
 8001288:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	73fb      	strb	r3, [r7, #15]
 800129e:	e047      	b.n	8001330 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 020e 	bic.w	r2, r2, #14
 80012ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 0201 	bic.w	r2, r2, #1
 80012be:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d4:	f003 021f 	and.w	r2, r3, #31
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	2101      	movs	r1, #1
 80012de:	fa01 f202 	lsl.w	r2, r1, r2
 80012e2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012ec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00c      	beq.n	8001310 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001304:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800130e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	4798      	blx	r3
    }
  }
  return status;
 8001330:	7bfb      	ldrb	r3, [r7, #15]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b084      	sub	sp, #16
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f003 031f 	and.w	r3, r3, #31
 800135a:	2204      	movs	r2, #4
 800135c:	409a      	lsls	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4013      	ands	r3, r2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d026      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x7a>
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	d021      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0320 	and.w	r3, r3, #32
 800137a:	2b00      	cmp	r3, #0
 800137c:	d107      	bne.n	800138e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0204 	bic.w	r2, r2, #4
 800138c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f003 021f 	and.w	r2, r3, #31
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	2104      	movs	r1, #4
 800139c:	fa01 f202 	lsl.w	r2, r1, r2
 80013a0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d071      	beq.n	800148e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80013b2:	e06c      	b.n	800148e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b8:	f003 031f 	and.w	r3, r3, #31
 80013bc:	2202      	movs	r2, #2
 80013be:	409a      	lsls	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d02e      	beq.n	8001426 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d029      	beq.n	8001426 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0320 	and.w	r3, r3, #32
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10b      	bne.n	80013f8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 020a 	bic.w	r2, r2, #10
 80013ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fc:	f003 021f 	and.w	r2, r3, #31
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	2102      	movs	r1, #2
 8001406:	fa01 f202 	lsl.w	r2, r1, r2
 800140a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001418:	2b00      	cmp	r3, #0
 800141a:	d038      	beq.n	800148e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001424:	e033      	b.n	800148e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f003 031f 	and.w	r3, r3, #31
 800142e:	2208      	movs	r2, #8
 8001430:	409a      	lsls	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4013      	ands	r3, r2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d02a      	beq.n	8001490 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	2b00      	cmp	r3, #0
 8001442:	d025      	beq.n	8001490 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 020e 	bic.w	r2, r2, #14
 8001452:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001458:	f003 021f 	and.w	r2, r3, #31
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	2101      	movs	r1, #1
 8001462:	fa01 f202 	lsl.w	r2, r1, r2
 8001466:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001482:	2b00      	cmp	r3, #0
 8001484:	d004      	beq.n	8001490 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800148e:	bf00      	nop
 8001490:	bf00      	nop
}
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001498:	b480      	push	{r7}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d802      	bhi.n	80014b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e001      	b.n	80014b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80014b4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	3b08      	subs	r3, #8
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80014c4:	fba2 2303 	umull	r2, r3, r2, r3
 80014c8:	091b      	lsrs	r3, r3, #4
 80014ca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	009a      	lsls	r2, r3, #2
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4413      	add	r3, r2
 80014d8:	461a      	mov	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80014e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 031f 	and.w	r3, r3, #31
 80014ea:	2201      	movs	r2, #1
 80014ec:	409a      	lsls	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80014f2:	bf00      	nop
 80014f4:	371c      	adds	r7, #28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40020407 	.word	0x40020407
 8001504:	40020800 	.word	0x40020800
 8001508:	40020820 	.word	0x40020820
 800150c:	cccccccd 	.word	0xcccccccd
 8001510:	40020880 	.word	0x40020880

08001514 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001528:	4413      	add	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	461a      	mov	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a08      	ldr	r2, [pc, #32]	; (8001558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001536:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	3b01      	subs	r3, #1
 800153c:	f003 031f 	and.w	r3, r3, #31
 8001540:	2201      	movs	r2, #1
 8001542:	409a      	lsls	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	1000823f 	.word	0x1000823f
 8001558:	40020940 	.word	0x40020940

0800155c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800155c:	b480      	push	{r7}
 800155e:	b087      	sub	sp, #28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800156a:	e15a      	b.n	8001822 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	2101      	movs	r1, #1
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	fa01 f303 	lsl.w	r3, r1, r3
 8001578:	4013      	ands	r3, r2
 800157a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 814c 	beq.w	800181c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d00b      	beq.n	80015a4 <HAL_GPIO_Init+0x48>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d007      	beq.n	80015a4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001598:	2b11      	cmp	r3, #17
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b12      	cmp	r3, #18
 80015a2:	d130      	bne.n	8001606 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	2203      	movs	r2, #3
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68da      	ldr	r2, [r3, #12]
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015da:	2201      	movs	r2, #1
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	091b      	lsrs	r3, r3, #4
 80015f0:	f003 0201 	and.w	r2, r3, #1
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	2203      	movs	r2, #3
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0xea>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b12      	cmp	r3, #18
 8001644:	d123      	bne.n	800168e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	08da      	lsrs	r2, r3, #3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3208      	adds	r2, #8
 800164e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001652:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	220f      	movs	r2, #15
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	691a      	ldr	r2, [r3, #16]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	08da      	lsrs	r2, r3, #3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3208      	adds	r2, #8
 8001688:	6939      	ldr	r1, [r7, #16]
 800168a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	2203      	movs	r2, #3
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 0203 	and.w	r2, r3, #3
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 80a6 	beq.w	800181c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d0:	4b5b      	ldr	r3, [pc, #364]	; (8001840 <HAL_GPIO_Init+0x2e4>)
 80016d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d4:	4a5a      	ldr	r2, [pc, #360]	; (8001840 <HAL_GPIO_Init+0x2e4>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6613      	str	r3, [r2, #96]	; 0x60
 80016dc:	4b58      	ldr	r3, [pc, #352]	; (8001840 <HAL_GPIO_Init+0x2e4>)
 80016de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016e8:	4a56      	ldr	r2, [pc, #344]	; (8001844 <HAL_GPIO_Init+0x2e8>)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	089b      	lsrs	r3, r3, #2
 80016ee:	3302      	adds	r3, #2
 80016f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	220f      	movs	r2, #15
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001712:	d01f      	beq.n	8001754 <HAL_GPIO_Init+0x1f8>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a4c      	ldr	r2, [pc, #304]	; (8001848 <HAL_GPIO_Init+0x2ec>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d019      	beq.n	8001750 <HAL_GPIO_Init+0x1f4>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a4b      	ldr	r2, [pc, #300]	; (800184c <HAL_GPIO_Init+0x2f0>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d013      	beq.n	800174c <HAL_GPIO_Init+0x1f0>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a4a      	ldr	r2, [pc, #296]	; (8001850 <HAL_GPIO_Init+0x2f4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d00d      	beq.n	8001748 <HAL_GPIO_Init+0x1ec>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a49      	ldr	r2, [pc, #292]	; (8001854 <HAL_GPIO_Init+0x2f8>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d007      	beq.n	8001744 <HAL_GPIO_Init+0x1e8>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a48      	ldr	r2, [pc, #288]	; (8001858 <HAL_GPIO_Init+0x2fc>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d101      	bne.n	8001740 <HAL_GPIO_Init+0x1e4>
 800173c:	2305      	movs	r3, #5
 800173e:	e00a      	b.n	8001756 <HAL_GPIO_Init+0x1fa>
 8001740:	2306      	movs	r3, #6
 8001742:	e008      	b.n	8001756 <HAL_GPIO_Init+0x1fa>
 8001744:	2304      	movs	r3, #4
 8001746:	e006      	b.n	8001756 <HAL_GPIO_Init+0x1fa>
 8001748:	2303      	movs	r3, #3
 800174a:	e004      	b.n	8001756 <HAL_GPIO_Init+0x1fa>
 800174c:	2302      	movs	r3, #2
 800174e:	e002      	b.n	8001756 <HAL_GPIO_Init+0x1fa>
 8001750:	2301      	movs	r3, #1
 8001752:	e000      	b.n	8001756 <HAL_GPIO_Init+0x1fa>
 8001754:	2300      	movs	r3, #0
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	f002 0203 	and.w	r2, r2, #3
 800175c:	0092      	lsls	r2, r2, #2
 800175e:	4093      	lsls	r3, r2
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001766:	4937      	ldr	r1, [pc, #220]	; (8001844 <HAL_GPIO_Init+0x2e8>)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	3302      	adds	r3, #2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001774:	4b39      	ldr	r3, [pc, #228]	; (800185c <HAL_GPIO_Init+0x300>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001798:	4a30      	ldr	r2, [pc, #192]	; (800185c <HAL_GPIO_Init+0x300>)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800179e:	4b2f      	ldr	r3, [pc, #188]	; (800185c <HAL_GPIO_Init+0x300>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017c2:	4a26      	ldr	r2, [pc, #152]	; (800185c <HAL_GPIO_Init+0x300>)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017c8:	4b24      	ldr	r3, [pc, #144]	; (800185c <HAL_GPIO_Init+0x300>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017ec:	4a1b      	ldr	r2, [pc, #108]	; (800185c <HAL_GPIO_Init+0x300>)
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <HAL_GPIO_Init+0x300>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001816:	4a11      	ldr	r2, [pc, #68]	; (800185c <HAL_GPIO_Init+0x300>)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	3301      	adds	r3, #1
 8001820:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	fa22 f303 	lsr.w	r3, r2, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	f47f ae9d 	bne.w	800156c <HAL_GPIO_Init+0x10>
  }
}
 8001832:	bf00      	nop
 8001834:	371c      	adds	r7, #28
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000
 8001844:	40010000 	.word	0x40010000
 8001848:	48000400 	.word	0x48000400
 800184c:	48000800 	.word	0x48000800
 8001850:	48000c00 	.word	0x48000c00
 8001854:	48001000 	.word	0x48001000
 8001858:	48001400 	.word	0x48001400
 800185c:	40010400 	.word	0x40010400

08001860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
 800186c:	4613      	mov	r3, r2
 800186e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001870:	787b      	ldrb	r3, [r7, #1]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800187c:	e002      	b.n	8001884 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800187e:	887a      	ldrh	r2, [r7, #2]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 f806 	bl	80018c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40010400 	.word	0x40010400

080018c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d141      	bne.n	800196a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018e6:	4b4b      	ldr	r3, [pc, #300]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018f2:	d131      	bne.n	8001958 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f4:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018fa:	4a46      	ldr	r2, [pc, #280]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001900:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001904:	4b43      	ldr	r3, [pc, #268]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190c:	4a41      	ldr	r2, [pc, #260]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001912:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001914:	4b40      	ldr	r3, [pc, #256]	; (8001a18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2232      	movs	r2, #50	; 0x32
 800191a:	fb02 f303 	mul.w	r3, r2, r3
 800191e:	4a3f      	ldr	r2, [pc, #252]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001920:	fba2 2303 	umull	r2, r3, r2, r3
 8001924:	0c9b      	lsrs	r3, r3, #18
 8001926:	3301      	adds	r3, #1
 8001928:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800192a:	e002      	b.n	8001932 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3b01      	subs	r3, #1
 8001930:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001932:	4b38      	ldr	r3, [pc, #224]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800193a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800193e:	d102      	bne.n	8001946 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f2      	bne.n	800192c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001946:	4b33      	ldr	r3, [pc, #204]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001952:	d158      	bne.n	8001a06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e057      	b.n	8001a08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001958:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800195a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800195e:	4a2d      	ldr	r2, [pc, #180]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001964:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001968:	e04d      	b.n	8001a06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001970:	d141      	bne.n	80019f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001972:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800197a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800197e:	d131      	bne.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001980:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001986:	4a23      	ldr	r2, [pc, #140]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001990:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001998:	4a1e      	ldr	r2, [pc, #120]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800199e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019a0:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2232      	movs	r2, #50	; 0x32
 80019a6:	fb02 f303 	mul.w	r3, r2, r3
 80019aa:	4a1c      	ldr	r2, [pc, #112]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019ac:	fba2 2303 	umull	r2, r3, r2, r3
 80019b0:	0c9b      	lsrs	r3, r3, #18
 80019b2:	3301      	adds	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019b6:	e002      	b.n	80019be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ca:	d102      	bne.n	80019d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f2      	bne.n	80019b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019de:	d112      	bne.n	8001a06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e011      	b.n	8001a08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019f4:	e007      	b.n	8001a06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a04:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	40007000 	.word	0x40007000
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	431bde83 	.word	0x431bde83

08001a20 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a2e:	6093      	str	r3, [r2, #8]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40007000 	.word	0x40007000

08001a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e308      	b.n	8002064 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d075      	beq.n	8001b4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a5e:	4ba3      	ldr	r3, [pc, #652]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a68:	4ba0      	ldr	r3, [pc, #640]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	2b0c      	cmp	r3, #12
 8001a76:	d102      	bne.n	8001a7e <HAL_RCC_OscConfig+0x3e>
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d002      	beq.n	8001a84 <HAL_RCC_OscConfig+0x44>
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d10b      	bne.n	8001a9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a84:	4b99      	ldr	r3, [pc, #612]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d05b      	beq.n	8001b48 <HAL_RCC_OscConfig+0x108>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d157      	bne.n	8001b48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e2e3      	b.n	8002064 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa4:	d106      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x74>
 8001aa6:	4b91      	ldr	r3, [pc, #580]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a90      	ldr	r2, [pc, #576]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	e01d      	b.n	8001af0 <HAL_RCC_OscConfig+0xb0>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001abc:	d10c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x98>
 8001abe:	4b8b      	ldr	r3, [pc, #556]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a8a      	ldr	r2, [pc, #552]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b88      	ldr	r3, [pc, #544]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a87      	ldr	r2, [pc, #540]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	e00b      	b.n	8001af0 <HAL_RCC_OscConfig+0xb0>
 8001ad8:	4b84      	ldr	r3, [pc, #528]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a83      	ldr	r2, [pc, #524]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b81      	ldr	r3, [pc, #516]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a80      	ldr	r2, [pc, #512]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d013      	beq.n	8001b20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff f9f4 	bl	8000ee4 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff f9f0 	bl	8000ee4 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e2a8      	b.n	8002064 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b12:	4b76      	ldr	r3, [pc, #472]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0xc0>
 8001b1e:	e014      	b.n	8001b4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff f9e0 	bl	8000ee4 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff f9dc 	bl	8000ee4 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e294      	b.n	8002064 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b3a:	4b6c      	ldr	r3, [pc, #432]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0xe8>
 8001b46:	e000      	b.n	8001b4a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d075      	beq.n	8001c42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b56:	4b65      	ldr	r3, [pc, #404]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b60:	4b62      	ldr	r3, [pc, #392]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	2b0c      	cmp	r3, #12
 8001b6e:	d102      	bne.n	8001b76 <HAL_RCC_OscConfig+0x136>
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d002      	beq.n	8001b7c <HAL_RCC_OscConfig+0x13c>
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d11f      	bne.n	8001bbc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b7c:	4b5b      	ldr	r3, [pc, #364]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_OscConfig+0x154>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e267      	b.n	8002064 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b94:	4b55      	ldr	r3, [pc, #340]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	061b      	lsls	r3, r3, #24
 8001ba2:	4952      	ldr	r1, [pc, #328]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ba8:	4b51      	ldr	r3, [pc, #324]	; (8001cf0 <HAL_RCC_OscConfig+0x2b0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff f94d 	bl	8000e4c <HAL_InitTick>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d043      	beq.n	8001c40 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e253      	b.n	8002064 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d023      	beq.n	8001c0c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bc4:	4b49      	ldr	r3, [pc, #292]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a48      	ldr	r2, [pc, #288]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff f988 	bl	8000ee4 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd8:	f7ff f984 	bl	8000ee4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e23c      	b.n	8002064 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bea:	4b40      	ldr	r3, [pc, #256]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf6:	4b3d      	ldr	r3, [pc, #244]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	061b      	lsls	r3, r3, #24
 8001c04:	4939      	ldr	r1, [pc, #228]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
 8001c0a:	e01a      	b.n	8001c42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0c:	4b37      	ldr	r3, [pc, #220]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a36      	ldr	r2, [pc, #216]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001c12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7ff f964 	bl	8000ee4 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c20:	f7ff f960 	bl	8000ee4 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e218      	b.n	8002064 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c32:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x1e0>
 8001c3e:	e000      	b.n	8001c42 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d03c      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d01c      	beq.n	8001c90 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c56:	4b25      	ldr	r3, [pc, #148]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5c:	4a23      	ldr	r2, [pc, #140]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c66:	f7ff f93d 	bl	8000ee4 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c6e:	f7ff f939 	bl	8000ee4 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e1f1      	b.n	8002064 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c80:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0ef      	beq.n	8001c6e <HAL_RCC_OscConfig+0x22e>
 8001c8e:	e01b      	b.n	8001cc8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c90:	4b16      	ldr	r3, [pc, #88]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c96:	4a15      	ldr	r2, [pc, #84]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca0:	f7ff f920 	bl	8000ee4 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7ff f91c 	bl	8000ee4 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e1d4      	b.n	8002064 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1ef      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80ab 	beq.w	8001e2c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d106      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x2b4>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e005      	b.n	8001cf6 <HAL_RCC_OscConfig+0x2b6>
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	20000004 	.word	0x20000004
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00d      	beq.n	8001d16 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	4baf      	ldr	r3, [pc, #700]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	4aae      	ldr	r2, [pc, #696]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d04:	6593      	str	r3, [r2, #88]	; 0x58
 8001d06:	4bac      	ldr	r3, [pc, #688]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d12:	2301      	movs	r3, #1
 8001d14:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d16:	4ba9      	ldr	r3, [pc, #676]	; (8001fbc <HAL_RCC_OscConfig+0x57c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d118      	bne.n	8001d54 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d22:	4ba6      	ldr	r3, [pc, #664]	; (8001fbc <HAL_RCC_OscConfig+0x57c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4aa5      	ldr	r2, [pc, #660]	; (8001fbc <HAL_RCC_OscConfig+0x57c>)
 8001d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d2e:	f7ff f8d9 	bl	8000ee4 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d36:	f7ff f8d5 	bl	8000ee4 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e18d      	b.n	8002064 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d48:	4b9c      	ldr	r3, [pc, #624]	; (8001fbc <HAL_RCC_OscConfig+0x57c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d108      	bne.n	8001d6e <HAL_RCC_OscConfig+0x32e>
 8001d5c:	4b96      	ldr	r3, [pc, #600]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d62:	4a95      	ldr	r2, [pc, #596]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d6c:	e024      	b.n	8001db8 <HAL_RCC_OscConfig+0x378>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b05      	cmp	r3, #5
 8001d74:	d110      	bne.n	8001d98 <HAL_RCC_OscConfig+0x358>
 8001d76:	4b90      	ldr	r3, [pc, #576]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7c:	4a8e      	ldr	r2, [pc, #568]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d86:	4b8c      	ldr	r3, [pc, #560]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8c:	4a8a      	ldr	r2, [pc, #552]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d96:	e00f      	b.n	8001db8 <HAL_RCC_OscConfig+0x378>
 8001d98:	4b87      	ldr	r3, [pc, #540]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9e:	4a86      	ldr	r2, [pc, #536]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001da8:	4b83      	ldr	r3, [pc, #524]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dae:	4a82      	ldr	r2, [pc, #520]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001db0:	f023 0304 	bic.w	r3, r3, #4
 8001db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d016      	beq.n	8001dee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc0:	f7ff f890 	bl	8000ee4 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc8:	f7ff f88c 	bl	8000ee4 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e142      	b.n	8002064 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dde:	4b76      	ldr	r3, [pc, #472]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0ed      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x388>
 8001dec:	e015      	b.n	8001e1a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dee:	f7ff f879 	bl	8000ee4 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001df4:	e00a      	b.n	8001e0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df6:	f7ff f875 	bl	8000ee4 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e12b      	b.n	8002064 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e0c:	4b6a      	ldr	r3, [pc, #424]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1ed      	bne.n	8001df6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e1a:	7ffb      	ldrb	r3, [r7, #31]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d105      	bne.n	8001e2c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e20:	4b65      	ldr	r3, [pc, #404]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	4a64      	ldr	r2, [pc, #400]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0320 	and.w	r3, r3, #32
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d03c      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d01c      	beq.n	8001e7a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e40:	4b5d      	ldr	r3, [pc, #372]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001e42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e46:	4a5c      	ldr	r2, [pc, #368]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e50:	f7ff f848 	bl	8000ee4 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e58:	f7ff f844 	bl	8000ee4 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e0fc      	b.n	8002064 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e6a:	4b53      	ldr	r3, [pc, #332]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001e6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0ef      	beq.n	8001e58 <HAL_RCC_OscConfig+0x418>
 8001e78:	e01b      	b.n	8001eb2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e7a:	4b4f      	ldr	r3, [pc, #316]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001e7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e80:	4a4d      	ldr	r2, [pc, #308]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001e82:	f023 0301 	bic.w	r3, r3, #1
 8001e86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8a:	f7ff f82b 	bl	8000ee4 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e92:	f7ff f827 	bl	8000ee4 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e0df      	b.n	8002064 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ea4:	4b44      	ldr	r3, [pc, #272]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1ef      	bne.n	8001e92 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 80d3 	beq.w	8002062 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ebc:	4b3e      	ldr	r3, [pc, #248]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	2b0c      	cmp	r3, #12
 8001ec6:	f000 808d 	beq.w	8001fe4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d15a      	bne.n	8001f88 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed2:	4b39      	ldr	r3, [pc, #228]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a38      	ldr	r2, [pc, #224]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001ed8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ede:	f7ff f801 	bl	8000ee4 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7fe fffd 	bl	8000ee4 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e0b5      	b.n	8002064 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef8:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f0      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f04:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <HAL_RCC_OscConfig+0x580>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6a11      	ldr	r1, [r2, #32]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f14:	3a01      	subs	r2, #1
 8001f16:	0112      	lsls	r2, r2, #4
 8001f18:	4311      	orrs	r1, r2
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001f1e:	0212      	lsls	r2, r2, #8
 8001f20:	4311      	orrs	r1, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f26:	0852      	lsrs	r2, r2, #1
 8001f28:	3a01      	subs	r2, #1
 8001f2a:	0552      	lsls	r2, r2, #21
 8001f2c:	4311      	orrs	r1, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f32:	0852      	lsrs	r2, r2, #1
 8001f34:	3a01      	subs	r2, #1
 8001f36:	0652      	lsls	r2, r2, #25
 8001f38:	4311      	orrs	r1, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f3e:	06d2      	lsls	r2, r2, #27
 8001f40:	430a      	orrs	r2, r1
 8001f42:	491d      	ldr	r1, [pc, #116]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a1a      	ldr	r2, [pc, #104]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f52:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f54:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4a17      	ldr	r2, [pc, #92]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7fe ffc0 	bl	8000ee4 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f68:	f7fe ffbc 	bl	8000ee4 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e074      	b.n	8002064 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0x528>
 8001f86:	e06c      	b.n	8002062 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001f8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f92:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001f9a:	f023 0303 	bic.w	r3, r3, #3
 8001f9e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <HAL_RCC_OscConfig+0x578>)
 8001fa6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7fe ff98 	bl	8000ee4 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb6:	e00e      	b.n	8001fd6 <HAL_RCC_OscConfig+0x596>
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40007000 	.word	0x40007000
 8001fc0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc4:	f7fe ff8e 	bl	8000ee4 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e046      	b.n	8002064 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd6:	4b25      	ldr	r3, [pc, #148]	; (800206c <HAL_RCC_OscConfig+0x62c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x584>
 8001fe2:	e03e      	b.n	8002062 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e039      	b.n	8002064 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	; (800206c <HAL_RCC_OscConfig+0x62c>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f003 0203 	and.w	r2, r3, #3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	429a      	cmp	r2, r3
 8002002:	d12c      	bne.n	800205e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	3b01      	subs	r3, #1
 8002010:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d123      	bne.n	800205e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002022:	429a      	cmp	r2, r3
 8002024:	d11b      	bne.n	800205e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002032:	429a      	cmp	r2, r3
 8002034:	d113      	bne.n	800205e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	085b      	lsrs	r3, r3, #1
 8002042:	3b01      	subs	r3, #1
 8002044:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002046:	429a      	cmp	r2, r3
 8002048:	d109      	bne.n	800205e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002054:	085b      	lsrs	r3, r3, #1
 8002056:	3b01      	subs	r3, #1
 8002058:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800205a:	429a      	cmp	r2, r3
 800205c:	d001      	beq.n	8002062 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40021000 	.word	0x40021000

08002070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e11e      	b.n	80022c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002088:	4b91      	ldr	r3, [pc, #580]	; (80022d0 <HAL_RCC_ClockConfig+0x260>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d910      	bls.n	80020b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b8e      	ldr	r3, [pc, #568]	; (80022d0 <HAL_RCC_ClockConfig+0x260>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 020f 	bic.w	r2, r3, #15
 800209e:	498c      	ldr	r1, [pc, #560]	; (80022d0 <HAL_RCC_ClockConfig+0x260>)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b8a      	ldr	r3, [pc, #552]	; (80022d0 <HAL_RCC_ClockConfig+0x260>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e106      	b.n	80022c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d073      	beq.n	80021ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d129      	bne.n	8002120 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020cc:	4b81      	ldr	r3, [pc, #516]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0f4      	b.n	80022c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80020dc:	f000 f99e 	bl	800241c <RCC_GetSysClockFreqFromPLLSource>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4a7c      	ldr	r2, [pc, #496]	; (80022d8 <HAL_RCC_ClockConfig+0x268>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d93f      	bls.n	800216a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80020ea:	4b7a      	ldr	r3, [pc, #488]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d033      	beq.n	800216a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002106:	2b00      	cmp	r3, #0
 8002108:	d12f      	bne.n	800216a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800210a:	4b72      	ldr	r3, [pc, #456]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002112:	4a70      	ldr	r2, [pc, #448]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 8002114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002118:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	e024      	b.n	800216a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d107      	bne.n	8002138 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002128:	4b6a      	ldr	r3, [pc, #424]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d109      	bne.n	8002148 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0c6      	b.n	80022c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002138:	4b66      	ldr	r3, [pc, #408]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0be      	b.n	80022c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002148:	f000 f8ce 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 800214c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4a61      	ldr	r2, [pc, #388]	; (80022d8 <HAL_RCC_ClockConfig+0x268>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d909      	bls.n	800216a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002156:	4b5f      	ldr	r3, [pc, #380]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800215e:	4a5d      	ldr	r2, [pc, #372]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 8002160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002164:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800216a:	4b5a      	ldr	r3, [pc, #360]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f023 0203 	bic.w	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4957      	ldr	r1, [pc, #348]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 8002178:	4313      	orrs	r3, r2
 800217a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800217c:	f7fe feb2 	bl	8000ee4 <HAL_GetTick>
 8002180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	e00a      	b.n	800219a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002184:	f7fe feae 	bl	8000ee4 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e095      	b.n	80022c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	4b4e      	ldr	r3, [pc, #312]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 020c 	and.w	r2, r3, #12
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d1eb      	bne.n	8002184 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d023      	beq.n	8002200 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c4:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	4a42      	ldr	r2, [pc, #264]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 80021ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d007      	beq.n	80021ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80021dc:	4b3d      	ldr	r3, [pc, #244]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80021e4:	4a3b      	ldr	r2, [pc, #236]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 80021e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4936      	ldr	r1, [pc, #216]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	608b      	str	r3, [r1, #8]
 80021fe:	e008      	b.n	8002212 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2b80      	cmp	r3, #128	; 0x80
 8002204:	d105      	bne.n	8002212 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002206:	4b33      	ldr	r3, [pc, #204]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	4a32      	ldr	r2, [pc, #200]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 800220c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002210:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002212:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <HAL_RCC_ClockConfig+0x260>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d21d      	bcs.n	800225c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002220:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <HAL_RCC_ClockConfig+0x260>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f023 020f 	bic.w	r2, r3, #15
 8002228:	4929      	ldr	r1, [pc, #164]	; (80022d0 <HAL_RCC_ClockConfig+0x260>)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	4313      	orrs	r3, r2
 800222e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002230:	f7fe fe58 	bl	8000ee4 <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002236:	e00a      	b.n	800224e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002238:	f7fe fe54 	bl	8000ee4 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	; 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e03b      	b.n	80022c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <HAL_RCC_ClockConfig+0x260>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d1ed      	bne.n	8002238 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002268:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4917      	ldr	r1, [pc, #92]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	490f      	ldr	r1, [pc, #60]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800229a:	f000 f825 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 800229e:	4601      	mov	r1, r0
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <HAL_RCC_ClockConfig+0x264>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	4a0c      	ldr	r2, [pc, #48]	; (80022dc <HAL_RCC_ClockConfig+0x26c>)
 80022ac:	5cd3      	ldrb	r3, [r2, r3]
 80022ae:	f003 031f 	and.w	r3, r3, #31
 80022b2:	fa21 f303 	lsr.w	r3, r1, r3
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <HAL_RCC_ClockConfig+0x270>)
 80022b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_RCC_ClockConfig+0x274>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe fdc4 	bl	8000e4c <HAL_InitTick>
 80022c4:	4603      	mov	r3, r0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40022000 	.word	0x40022000
 80022d4:	40021000 	.word	0x40021000
 80022d8:	04c4b400 	.word	0x04c4b400
 80022dc:	08006184 	.word	0x08006184
 80022e0:	20000000 	.word	0x20000000
 80022e4:	20000004 	.word	0x20000004

080022e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80022ee:	4b2c      	ldr	r3, [pc, #176]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d102      	bne.n	8002300 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022fa:	4b2a      	ldr	r3, [pc, #168]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	e047      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002300:	4b27      	ldr	r3, [pc, #156]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b08      	cmp	r3, #8
 800230a:	d102      	bne.n	8002312 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800230c:	4b26      	ldr	r3, [pc, #152]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	e03e      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002312:	4b23      	ldr	r3, [pc, #140]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b0c      	cmp	r3, #12
 800231c:	d136      	bne.n	800238c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800231e:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002328:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	3301      	adds	r3, #1
 8002334:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b03      	cmp	r3, #3
 800233a:	d10c      	bne.n	8002356 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800233c:	4a1a      	ldr	r2, [pc, #104]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	fbb2 f3f3 	udiv	r3, r2, r3
 8002344:	4a16      	ldr	r2, [pc, #88]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002346:	68d2      	ldr	r2, [r2, #12]
 8002348:	0a12      	lsrs	r2, r2, #8
 800234a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	617b      	str	r3, [r7, #20]
      break;
 8002354:	e00c      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002356:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	4a10      	ldr	r2, [pc, #64]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002360:	68d2      	ldr	r2, [r2, #12]
 8002362:	0a12      	lsrs	r2, r2, #8
 8002364:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002368:	fb02 f303 	mul.w	r3, r2, r3
 800236c:	617b      	str	r3, [r7, #20]
      break;
 800236e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	0e5b      	lsrs	r3, r3, #25
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	3301      	adds	r3, #1
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	fbb2 f3f3 	udiv	r3, r2, r3
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	e001      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002390:	693b      	ldr	r3, [r7, #16]
}
 8002392:	4618      	mov	r0, r3
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000
 80023a4:	00f42400 	.word	0x00f42400
 80023a8:	016e3600 	.word	0x016e3600

080023ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000000 	.word	0x20000000

080023c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023c8:	f7ff fff0 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023cc:	4601      	mov	r1, r0
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	4a04      	ldr	r2, [pc, #16]	; (80023ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80023da:	5cd3      	ldrb	r3, [r2, r3]
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	08006194 	.word	0x08006194

080023f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023f4:	f7ff ffda 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023f8:	4601      	mov	r1, r0
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	0adb      	lsrs	r3, r3, #11
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	4a04      	ldr	r2, [pc, #16]	; (8002418 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002406:	5cd3      	ldrb	r3, [r2, r3]
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002410:	4618      	mov	r0, r3
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000
 8002418:	08006194 	.word	0x08006194

0800241c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002422:	4b1e      	ldr	r3, [pc, #120]	; (800249c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800242c:	4b1b      	ldr	r3, [pc, #108]	; (800249c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	3301      	adds	r3, #1
 8002438:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	2b03      	cmp	r3, #3
 800243e:	d10c      	bne.n	800245a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002440:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	fbb2 f3f3 	udiv	r3, r2, r3
 8002448:	4a14      	ldr	r2, [pc, #80]	; (800249c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800244a:	68d2      	ldr	r2, [r2, #12]
 800244c:	0a12      	lsrs	r2, r2, #8
 800244e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	617b      	str	r3, [r7, #20]
    break;
 8002458:	e00c      	b.n	8002474 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800245a:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002462:	4a0e      	ldr	r2, [pc, #56]	; (800249c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002464:	68d2      	ldr	r2, [r2, #12]
 8002466:	0a12      	lsrs	r2, r2, #8
 8002468:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800246c:	fb02 f303 	mul.w	r3, r2, r3
 8002470:	617b      	str	r3, [r7, #20]
    break;
 8002472:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	0e5b      	lsrs	r3, r3, #25
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	3301      	adds	r3, #1
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800248e:	687b      	ldr	r3, [r7, #4]
}
 8002490:	4618      	mov	r0, r3
 8002492:	371c      	adds	r7, #28
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40021000 	.word	0x40021000
 80024a0:	016e3600 	.word	0x016e3600
 80024a4:	00f42400 	.word	0x00f42400

080024a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024b0:	2300      	movs	r3, #0
 80024b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024b4:	2300      	movs	r3, #0
 80024b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 8098 	beq.w	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c6:	2300      	movs	r3, #0
 80024c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ca:	4b43      	ldr	r3, [pc, #268]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10d      	bne.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d6:	4b40      	ldr	r3, [pc, #256]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024da:	4a3f      	ldr	r2, [pc, #252]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e0:	6593      	str	r3, [r2, #88]	; 0x58
 80024e2:	4b3d      	ldr	r3, [pc, #244]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ee:	2301      	movs	r3, #1
 80024f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024f2:	4b3a      	ldr	r3, [pc, #232]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a39      	ldr	r2, [pc, #228]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024fe:	f7fe fcf1 	bl	8000ee4 <HAL_GetTick>
 8002502:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002504:	e009      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002506:	f7fe fced 	bl	8000ee4 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d902      	bls.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	74fb      	strb	r3, [r7, #19]
        break;
 8002518:	e005      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800251a:	4b30      	ldr	r3, [pc, #192]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0ef      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002526:	7cfb      	ldrb	r3, [r7, #19]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d159      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800252c:	4b2a      	ldr	r3, [pc, #168]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800252e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002536:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d01e      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	429a      	cmp	r2, r3
 8002546:	d019      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002548:	4b23      	ldr	r3, [pc, #140]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002552:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002554:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255a:	4a1f      	ldr	r2, [pc, #124]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002564:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256a:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800256c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002574:	4a18      	ldr	r2, [pc, #96]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d016      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002586:	f7fe fcad 	bl	8000ee4 <HAL_GetTick>
 800258a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258c:	e00b      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7fe fca9 	bl	8000ee4 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d902      	bls.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	74fb      	strb	r3, [r7, #19]
            break;
 80025a4:	e006      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ec      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80025b4:	7cfb      	ldrb	r3, [r7, #19]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10b      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ba:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c8:	4903      	ldr	r1, [pc, #12]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025d0:	e008      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025d2:	7cfb      	ldrb	r3, [r7, #19]
 80025d4:	74bb      	strb	r3, [r7, #18]
 80025d6:	e005      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e0:	7cfb      	ldrb	r3, [r7, #19]
 80025e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025e4:	7c7b      	ldrb	r3, [r7, #17]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d105      	bne.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ea:	4bac      	ldr	r3, [pc, #688]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ee:	4aab      	ldr	r2, [pc, #684]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80025f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002602:	4ba6      	ldr	r3, [pc, #664]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002608:	f023 0203 	bic.w	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	49a2      	ldr	r1, [pc, #648]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002624:	4b9d      	ldr	r3, [pc, #628]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262a:	f023 020c 	bic.w	r2, r3, #12
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	499a      	ldr	r1, [pc, #616]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002646:	4b95      	ldr	r3, [pc, #596]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	4991      	ldr	r1, [pc, #580]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002668:	4b8c      	ldr	r3, [pc, #560]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	4989      	ldr	r1, [pc, #548]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800268a:	4b84      	ldr	r3, [pc, #528]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002690:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	4980      	ldr	r1, [pc, #512]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00a      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026ac:	4b7b      	ldr	r3, [pc, #492]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	4978      	ldr	r1, [pc, #480]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026ce:	4b73      	ldr	r3, [pc, #460]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	496f      	ldr	r1, [pc, #444]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00a      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026f0:	4b6a      	ldr	r3, [pc, #424]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	4967      	ldr	r1, [pc, #412]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002712:	4b62      	ldr	r3, [pc, #392]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002718:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	495e      	ldr	r1, [pc, #376]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00a      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002734:	4b59      	ldr	r3, [pc, #356]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	4956      	ldr	r1, [pc, #344]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002752:	2b00      	cmp	r3, #0
 8002754:	d015      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002756:	4b51      	ldr	r3, [pc, #324]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	494d      	ldr	r1, [pc, #308]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002774:	d105      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002776:	4b49      	ldr	r3, [pc, #292]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	4a48      	ldr	r2, [pc, #288]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800277c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002780:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800278a:	2b00      	cmp	r3, #0
 800278c:	d015      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800278e:	4b43      	ldr	r3, [pc, #268]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002794:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	493f      	ldr	r1, [pc, #252]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ac:	d105      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ae:	4b3b      	ldr	r3, [pc, #236]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	4a3a      	ldr	r2, [pc, #232]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80027b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027b8:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d015      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027c6:	4b35      	ldr	r3, [pc, #212]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80027c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d4:	4931      	ldr	r1, [pc, #196]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027e4:	d105      	bne.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027e6:	4b2d      	ldr	r3, [pc, #180]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	4a2c      	ldr	r2, [pc, #176]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80027ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027f0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d015      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027fe:	4b27      	ldr	r3, [pc, #156]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002804:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280c:	4923      	ldr	r1, [pc, #140]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800281c:	d105      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800281e:	4b1f      	ldr	r3, [pc, #124]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	4a1e      	ldr	r2, [pc, #120]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002824:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002828:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d015      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002836:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002844:	4915      	ldr	r1, [pc, #84]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002850:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002854:	d105      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002856:	4b11      	ldr	r3, [pc, #68]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	4a10      	ldr	r2, [pc, #64]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800285c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002860:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d018      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002874:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	4907      	ldr	r1, [pc, #28]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800288c:	d108      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800288e:	4b03      	ldr	r3, [pc, #12]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	4a02      	ldr	r2, [pc, #8]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002898:	60d3      	str	r3, [r2, #12]
 800289a:	e001      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800289c:	40021000 	.word	0x40021000
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d015      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80028ac:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	4918      	ldr	r1, [pc, #96]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ca:	d105      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028cc:	4b13      	ldr	r3, [pc, #76]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4a12      	ldr	r2, [pc, #72]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80028d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d015      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80028e4:	4b0d      	ldr	r3, [pc, #52]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80028e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f2:	490a      	ldr	r1, [pc, #40]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002902:	d105      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002904:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4a04      	ldr	r2, [pc, #16]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800290a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800290e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002910:	7cbb      	ldrb	r3, [r7, #18]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000

08002920 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e09d      	b.n	8002a6e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	2b00      	cmp	r3, #0
 8002938:	d108      	bne.n	800294c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002942:	d009      	beq.n	8002958 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	61da      	str	r2, [r3, #28]
 800294a:	e005      	b.n	8002958 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fe f87c 	bl	8000a70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800298e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002998:	d902      	bls.n	80029a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	e002      	b.n	80029a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80029ae:	d007      	beq.n	80029c0 <HAL_SPI_Init+0xa0>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029b8:	d002      	beq.n	80029c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a02:	ea42 0103 	orr.w	r1, r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	0c1b      	lsrs	r3, r3, #16
 8002a1c:	f003 0204 	and.w	r2, r3, #4
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a3c:	ea42 0103 	orr.w	r1, r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69da      	ldr	r2, [r3, #28]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b088      	sub	sp, #32
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	603b      	str	r3, [r7, #0]
 8002a82:	4613      	mov	r3, r2
 8002a84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_SPI_Transmit+0x22>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e158      	b.n	8002d4a <HAL_SPI_Transmit+0x2d4>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002aa0:	f7fe fa20 	bl	8000ee4 <HAL_GetTick>
 8002aa4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d002      	beq.n	8002abc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002aba:	e13d      	b.n	8002d38 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_SPI_Transmit+0x52>
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d102      	bne.n	8002ace <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002acc:	e134      	b.n	8002d38 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	88fa      	ldrh	r2, [r7, #6]
 8002ae6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	88fa      	ldrh	r2, [r7, #6]
 8002aec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b18:	d10f      	bne.n	8002b3a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b44:	2b40      	cmp	r3, #64	; 0x40
 8002b46:	d007      	beq.n	8002b58 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b60:	d94b      	bls.n	8002bfa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_SPI_Transmit+0xfa>
 8002b6a:	8afb      	ldrh	r3, [r7, #22]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d13e      	bne.n	8002bee <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	881a      	ldrh	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b80:	1c9a      	adds	r2, r3, #2
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b94:	e02b      	b.n	8002bee <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d112      	bne.n	8002bca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	881a      	ldrh	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb4:	1c9a      	adds	r2, r3, #2
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bc8:	e011      	b.n	8002bee <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bca:	f7fe f98b 	bl	8000ee4 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d803      	bhi.n	8002be2 <HAL_SPI_Transmit+0x16c>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002be0:	d102      	bne.n	8002be8 <HAL_SPI_Transmit+0x172>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d102      	bne.n	8002bee <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bec:	e0a4      	b.n	8002d38 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1ce      	bne.n	8002b96 <HAL_SPI_Transmit+0x120>
 8002bf8:	e07c      	b.n	8002cf4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <HAL_SPI_Transmit+0x192>
 8002c02:	8afb      	ldrh	r3, [r7, #22]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d170      	bne.n	8002cea <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d912      	bls.n	8002c38 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c16:	881a      	ldrh	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c22:	1c9a      	adds	r2, r3, #2
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	3b02      	subs	r3, #2
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c36:	e058      	b.n	8002cea <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	330c      	adds	r3, #12
 8002c42:	7812      	ldrb	r2, [r2, #0]
 8002c44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c5e:	e044      	b.n	8002cea <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d12b      	bne.n	8002cc6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d912      	bls.n	8002c9e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7c:	881a      	ldrh	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c88:	1c9a      	adds	r2, r3, #2
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b02      	subs	r3, #2
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c9c:	e025      	b.n	8002cea <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	330c      	adds	r3, #12
 8002ca8:	7812      	ldrb	r2, [r2, #0]
 8002caa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cc4:	e011      	b.n	8002cea <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cc6:	f7fe f90d 	bl	8000ee4 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d803      	bhi.n	8002cde <HAL_SPI_Transmit+0x268>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cdc:	d102      	bne.n	8002ce4 <HAL_SPI_Transmit+0x26e>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ce8:	e026      	b.n	8002d38 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1b5      	bne.n	8002c60 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	6839      	ldr	r1, [r7, #0]
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 fdfb 	bl	80038f4 <SPI_EndRxTxTransaction>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10a      	bne.n	8002d28 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	77fb      	strb	r3, [r7, #31]
 8002d34:	e000      	b.n	8002d38 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002d36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d48:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b088      	sub	sp, #32
 8002d56:	af02      	add	r7, sp, #8
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d6e:	d112      	bne.n	8002d96 <HAL_SPI_Receive+0x44>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10e      	bne.n	8002d96 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d80:	88fa      	ldrh	r2, [r7, #6]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	4613      	mov	r3, r2
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	68b9      	ldr	r1, [r7, #8]
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 f910 	bl	8002fb2 <HAL_SPI_TransmitReceive>
 8002d92:	4603      	mov	r3, r0
 8002d94:	e109      	b.n	8002faa <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_SPI_Receive+0x52>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e102      	b.n	8002faa <HAL_SPI_Receive+0x258>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dac:	f7fe f89a 	bl	8000ee4 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d002      	beq.n	8002dc4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002dc2:	e0e9      	b.n	8002f98 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_SPI_Receive+0x7e>
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002dd4:	e0e0      	b.n	8002f98 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2204      	movs	r2, #4
 8002dda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	88fa      	ldrh	r2, [r7, #6]
 8002dee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	88fa      	ldrh	r2, [r7, #6]
 8002df6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e20:	d908      	bls.n	8002e34 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	e007      	b.n	8002e44 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e42:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e4c:	d10f      	bne.n	8002e6e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e6c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e78:	2b40      	cmp	r3, #64	; 0x40
 8002e7a:	d007      	beq.n	8002e8c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e8a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e94:	d867      	bhi.n	8002f66 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e96:	e030      	b.n	8002efa <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d117      	bne.n	8002ed6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f103 020c 	add.w	r2, r3, #12
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	7812      	ldrb	r2, [r2, #0]
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002ed4:	e011      	b.n	8002efa <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ed6:	f7fe f805 	bl	8000ee4 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d803      	bhi.n	8002eee <HAL_SPI_Receive+0x19c>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eec:	d102      	bne.n	8002ef4 <HAL_SPI_Receive+0x1a2>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d102      	bne.n	8002efa <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ef8:	e04e      	b.n	8002f98 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1c8      	bne.n	8002e98 <HAL_SPI_Receive+0x146>
 8002f06:	e034      	b.n	8002f72 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d115      	bne.n	8002f42 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	b292      	uxth	r2, r2
 8002f22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	1c9a      	adds	r2, r3, #2
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002f40:	e011      	b.n	8002f66 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f42:	f7fd ffcf 	bl	8000ee4 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d803      	bhi.n	8002f5a <HAL_SPI_Receive+0x208>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f58:	d102      	bne.n	8002f60 <HAL_SPI_Receive+0x20e>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d102      	bne.n	8002f66 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f64:	e018      	b.n	8002f98 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1ca      	bne.n	8002f08 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	6839      	ldr	r1, [r7, #0]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 fc64 	bl	8003844 <SPI_EndRxTransaction>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2220      	movs	r2, #32
 8002f86:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	75fb      	strb	r3, [r7, #23]
 8002f94:	e000      	b.n	8002f98 <HAL_SPI_Receive+0x246>
  }

error :
 8002f96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b08a      	sub	sp, #40	; 0x28
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
 8002fbe:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_SPI_TransmitReceive+0x26>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e1fb      	b.n	80033d0 <HAL_SPI_TransmitReceive+0x41e>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fe0:	f7fd ff80 	bl	8000ee4 <HAL_GetTick>
 8002fe4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fec:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002ff4:	887b      	ldrh	r3, [r7, #2]
 8002ff6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ffc:	7efb      	ldrb	r3, [r7, #27]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d00e      	beq.n	8003020 <HAL_SPI_TransmitReceive+0x6e>
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003008:	d106      	bne.n	8003018 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d102      	bne.n	8003018 <HAL_SPI_TransmitReceive+0x66>
 8003012:	7efb      	ldrb	r3, [r7, #27]
 8003014:	2b04      	cmp	r3, #4
 8003016:	d003      	beq.n	8003020 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003018:	2302      	movs	r3, #2
 800301a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800301e:	e1cd      	b.n	80033bc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_SPI_TransmitReceive+0x80>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <HAL_SPI_TransmitReceive+0x80>
 800302c:	887b      	ldrh	r3, [r7, #2]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d103      	bne.n	800303a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003038:	e1c0      	b.n	80033bc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b04      	cmp	r3, #4
 8003044:	d003      	beq.n	800304e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2205      	movs	r2, #5
 800304a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	887a      	ldrh	r2, [r7, #2]
 800305e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	887a      	ldrh	r2, [r7, #2]
 8003066:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	887a      	ldrh	r2, [r7, #2]
 8003074:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	887a      	ldrh	r2, [r7, #2]
 800307a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003090:	d802      	bhi.n	8003098 <HAL_SPI_TransmitReceive+0xe6>
 8003092:	8a3b      	ldrh	r3, [r7, #16]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d908      	bls.n	80030aa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	e007      	b.n	80030ba <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030b8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c4:	2b40      	cmp	r3, #64	; 0x40
 80030c6:	d007      	beq.n	80030d8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030e0:	d97c      	bls.n	80031dc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <HAL_SPI_TransmitReceive+0x13e>
 80030ea:	8a7b      	ldrh	r3, [r7, #18]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d169      	bne.n	80031c4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f4:	881a      	ldrh	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	1c9a      	adds	r2, r3, #2
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800310a:	b29b      	uxth	r3, r3
 800310c:	3b01      	subs	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003114:	e056      	b.n	80031c4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b02      	cmp	r3, #2
 8003122:	d11b      	bne.n	800315c <HAL_SPI_TransmitReceive+0x1aa>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d016      	beq.n	800315c <HAL_SPI_TransmitReceive+0x1aa>
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	2b01      	cmp	r3, #1
 8003132:	d113      	bne.n	800315c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003138:	881a      	ldrh	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003144:	1c9a      	adds	r2, r3, #2
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b01      	cmp	r3, #1
 8003168:	d11c      	bne.n	80031a4 <HAL_SPI_TransmitReceive+0x1f2>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d016      	beq.n	80031a4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	b292      	uxth	r2, r2
 8003182:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	1c9a      	adds	r2, r3, #2
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031a0:	2301      	movs	r3, #1
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031a4:	f7fd fe9e 	bl	8000ee4 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d807      	bhi.n	80031c4 <HAL_SPI_TransmitReceive+0x212>
 80031b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031ba:	d003      	beq.n	80031c4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80031c2:	e0fb      	b.n	80033bc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1a3      	bne.n	8003116 <HAL_SPI_TransmitReceive+0x164>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d19d      	bne.n	8003116 <HAL_SPI_TransmitReceive+0x164>
 80031da:	e0df      	b.n	800339c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_SPI_TransmitReceive+0x23a>
 80031e4:	8a7b      	ldrh	r3, [r7, #18]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	f040 80cb 	bne.w	8003382 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d912      	bls.n	800321c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	881a      	ldrh	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	1c9a      	adds	r2, r3, #2
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b02      	subs	r3, #2
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	87da      	strh	r2, [r3, #62]	; 0x3e
 800321a:	e0b2      	b.n	8003382 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	330c      	adds	r3, #12
 8003226:	7812      	ldrb	r2, [r2, #0]
 8003228:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003242:	e09e      	b.n	8003382 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b02      	cmp	r3, #2
 8003250:	d134      	bne.n	80032bc <HAL_SPI_TransmitReceive+0x30a>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003256:	b29b      	uxth	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d02f      	beq.n	80032bc <HAL_SPI_TransmitReceive+0x30a>
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	2b01      	cmp	r3, #1
 8003260:	d12c      	bne.n	80032bc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b01      	cmp	r3, #1
 800326a:	d912      	bls.n	8003292 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	881a      	ldrh	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	1c9a      	adds	r2, r3, #2
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b02      	subs	r3, #2
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003290:	e012      	b.n	80032b8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	330c      	adds	r3, #12
 800329c:	7812      	ldrb	r2, [r2, #0]
 800329e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d148      	bne.n	800335c <HAL_SPI_TransmitReceive+0x3aa>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d042      	beq.n	800335c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d923      	bls.n	800332a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	b292      	uxth	r2, r2
 80032ee:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	1c9a      	adds	r2, r3, #2
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b02      	subs	r3, #2
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b01      	cmp	r3, #1
 8003316:	d81f      	bhi.n	8003358 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003326:	605a      	str	r2, [r3, #4]
 8003328:	e016      	b.n	8003358 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f103 020c 	add.w	r2, r3, #12
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	7812      	ldrb	r2, [r2, #0]
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003358:	2301      	movs	r3, #1
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800335c:	f7fd fdc2 	bl	8000ee4 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003368:	429a      	cmp	r2, r3
 800336a:	d803      	bhi.n	8003374 <HAL_SPI_TransmitReceive+0x3c2>
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003372:	d102      	bne.n	800337a <HAL_SPI_TransmitReceive+0x3c8>
 8003374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003376:	2b00      	cmp	r3, #0
 8003378:	d103      	bne.n	8003382 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003380:	e01c      	b.n	80033bc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	f47f af5b 	bne.w	8003244 <HAL_SPI_TransmitReceive+0x292>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	f47f af54 	bne.w	8003244 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 faa7 	bl	80038f4 <SPI_EndRxTxTransaction>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d006      	beq.n	80033ba <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2220      	movs	r2, #32
 80033b6:	661a      	str	r2, [r3, #96]	; 0x60
 80033b8:	e000      	b.n	80033bc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80033ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80033cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3728      	adds	r7, #40	; 0x28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	099b      	lsrs	r3, r3, #6
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10f      	bne.n	800341c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	099b      	lsrs	r3, r3, #6
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d004      	beq.n	800341c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	4798      	blx	r3
    return;
 800341a:	e0d8      	b.n	80035ce <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	085b      	lsrs	r3, r3, #1
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <HAL_SPI_IRQHandler+0x66>
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	09db      	lsrs	r3, r3, #7
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d004      	beq.n	800343e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	4798      	blx	r3
    return;
 800343c:	e0c7      	b.n	80035ce <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	095b      	lsrs	r3, r3, #5
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10c      	bne.n	8003464 <HAL_SPI_IRQHandler+0x8c>
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	099b      	lsrs	r3, r3, #6
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	0a1b      	lsrs	r3, r3, #8
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80b5 	beq.w	80035ce <HAL_SPI_IRQHandler+0x1f6>
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80ae 	beq.w	80035ce <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	099b      	lsrs	r3, r3, #6
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d023      	beq.n	80034c6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b03      	cmp	r3, #3
 8003488:	d011      	beq.n	80034ae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800348e:	f043 0204 	orr.w	r2, r3, #4
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	e00b      	b.n	80034c6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	693b      	ldr	r3, [r7, #16]
        return;
 80034c4:	e083      	b.n	80035ce <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	095b      	lsrs	r3, r3, #5
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d014      	beq.n	80034fc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d6:	f043 0201 	orr.w	r2, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	0a1b      	lsrs	r3, r3, #8
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00c      	beq.n	8003522 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350c:	f043 0208 	orr.w	r2, r3, #8
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003514:	2300      	movs	r3, #0
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003526:	2b00      	cmp	r3, #0
 8003528:	d050      	beq.n	80035cc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003538:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d104      	bne.n	8003556 <HAL_SPI_IRQHandler+0x17e>
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d034      	beq.n	80035c0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0203 	bic.w	r2, r2, #3
 8003564:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356a:	2b00      	cmp	r3, #0
 800356c:	d011      	beq.n	8003592 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003572:	4a18      	ldr	r2, [pc, #96]	; (80035d4 <HAL_SPI_IRQHandler+0x1fc>)
 8003574:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357a:	4618      	mov	r0, r3
 800357c:	f7fd fe76 	bl	800126c <HAL_DMA_Abort_IT>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d005      	beq.n	8003592 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003596:	2b00      	cmp	r3, #0
 8003598:	d016      	beq.n	80035c8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359e:	4a0d      	ldr	r2, [pc, #52]	; (80035d4 <HAL_SPI_IRQHandler+0x1fc>)
 80035a0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fd fe60 	bl	800126c <HAL_DMA_Abort_IT>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80035be:	e003      	b.n	80035c8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f809 	bl	80035d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80035c6:	e000      	b.n	80035ca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80035c8:	bf00      	nop
    return;
 80035ca:	bf00      	nop
 80035cc:	bf00      	nop
  }
}
 80035ce:	3720      	adds	r7, #32
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	080035ed 	.word	0x080035ed

080035d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f7ff ffe5 	bl	80035d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800360e:	bf00      	nop
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	4613      	mov	r3, r2
 8003626:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003628:	f7fd fc5c 	bl	8000ee4 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	4413      	add	r3, r2
 8003636:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003638:	f7fd fc54 	bl	8000ee4 <HAL_GetTick>
 800363c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800363e:	4b39      	ldr	r3, [pc, #228]	; (8003724 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	015b      	lsls	r3, r3, #5
 8003644:	0d1b      	lsrs	r3, r3, #20
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	fb02 f303 	mul.w	r3, r2, r3
 800364c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800364e:	e054      	b.n	80036fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003656:	d050      	beq.n	80036fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003658:	f7fd fc44 	bl	8000ee4 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	429a      	cmp	r2, r3
 8003666:	d902      	bls.n	800366e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d13d      	bne.n	80036ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800367c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003686:	d111      	bne.n	80036ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003690:	d004      	beq.n	800369c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369a:	d107      	bne.n	80036ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036b4:	d10f      	bne.n	80036d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e017      	b.n	800371a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4013      	ands	r3, r2
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	429a      	cmp	r2, r3
 8003708:	bf0c      	ite	eq
 800370a:	2301      	moveq	r3, #1
 800370c:	2300      	movne	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	461a      	mov	r2, r3
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	429a      	cmp	r2, r3
 8003716:	d19b      	bne.n	8003650 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20000000 	.word	0x20000000

08003728 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
 8003734:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003736:	f7fd fbd5 	bl	8000ee4 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	4413      	add	r3, r2
 8003744:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003746:	f7fd fbcd 	bl	8000ee4 <HAL_GetTick>
 800374a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800374c:	4b3c      	ldr	r3, [pc, #240]	; (8003840 <SPI_WaitFifoStateUntilTimeout+0x118>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	00da      	lsls	r2, r3, #3
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	0d1b      	lsrs	r3, r3, #20
 800375c:	69fa      	ldr	r2, [r7, #28]
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8003764:	e05f      	b.n	8003826 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800376c:	d106      	bne.n	800377c <SPI_WaitFifoStateUntilTimeout+0x54>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d103      	bne.n	800377c <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	330c      	adds	r3, #12
 800377a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003782:	d050      	beq.n	8003826 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003784:	f7fd fbae 	bl	8000ee4 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	69fa      	ldr	r2, [r7, #28]
 8003790:	429a      	cmp	r2, r3
 8003792:	d902      	bls.n	800379a <SPI_WaitFifoStateUntilTimeout+0x72>
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d13d      	bne.n	8003816 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037b2:	d111      	bne.n	80037d8 <SPI_WaitFifoStateUntilTimeout+0xb0>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037bc:	d004      	beq.n	80037c8 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c6:	d107      	bne.n	80037d8 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e0:	d10f      	bne.n	8003802 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003800:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e010      	b.n	8003838 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	3b01      	subs	r3, #1
 8003824:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4013      	ands	r3, r2
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	429a      	cmp	r2, r3
 8003834:	d197      	bne.n	8003766 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20000000 	.word	0x20000000

08003844 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af02      	add	r7, sp, #8
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003858:	d111      	bne.n	800387e <SPI_EndRxTransaction+0x3a>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003862:	d004      	beq.n	800386e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386c:	d107      	bne.n	800387e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800387c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2200      	movs	r2, #0
 8003886:	2180      	movs	r1, #128	; 0x80
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f7ff fec5 	bl	8003618 <SPI_WaitFlagStateUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d007      	beq.n	80038a4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003898:	f043 0220 	orr.w	r2, r3, #32
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e023      	b.n	80038ec <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ac:	d11d      	bne.n	80038ea <SPI_EndRxTransaction+0xa6>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b6:	d004      	beq.n	80038c2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c0:	d113      	bne.n	80038ea <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f7ff ff2a 	bl	8003728 <SPI_WaitFifoStateUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d007      	beq.n	80038ea <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038de:	f043 0220 	orr.w	r2, r3, #32
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e000      	b.n	80038ec <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2200      	movs	r2, #0
 8003908:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f7ff ff0b 	bl	8003728 <SPI_WaitFifoStateUntilTimeout>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391c:	f043 0220 	orr.w	r2, r3, #32
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e027      	b.n	8003978 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2200      	movs	r2, #0
 8003930:	2180      	movs	r1, #128	; 0x80
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f7ff fe70 	bl	8003618 <SPI_WaitFlagStateUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d007      	beq.n	800394e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003942:	f043 0220 	orr.w	r2, r3, #32
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e014      	b.n	8003978 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2200      	movs	r2, #0
 8003956:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f7ff fee4 	bl	8003728 <SPI_WaitFifoStateUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d007      	beq.n	8003976 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800396a:	f043 0220 	orr.w	r2, r3, #32
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e000      	b.n	8003978 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e042      	b.n	8003a18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003998:	2b00      	cmp	r3, #0
 800399a:	d106      	bne.n	80039aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7fd f821 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2224      	movs	r2, #36	; 0x24
 80039ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0201 	bic.w	r2, r2, #1
 80039c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f82c 	bl	8003a20 <UART_SetConfig>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e022      	b.n	8003a18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 faf2 	bl	8003fc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 fb79 	bl	8004108 <UART_CheckIdleState>
 8003a16:	4603      	mov	r3, r0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a20:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003a24:	b088      	sub	sp, #32
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a4a:	69fa      	ldr	r2, [r7, #28]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	4bb1      	ldr	r3, [pc, #708]	; (8003d1c <UART_SetConfig+0x2fc>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	69f9      	ldr	r1, [r7, #28]
 8003a60:	430b      	orrs	r3, r1
 8003a62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4aa6      	ldr	r2, [pc, #664]	; (8003d20 <UART_SetConfig+0x300>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d004      	beq.n	8003a94 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003a9e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6812      	ldr	r2, [r2, #0]
 8003aa6:	69f9      	ldr	r1, [r7, #28]
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	f023 010f 	bic.w	r1, r3, #15
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a97      	ldr	r2, [pc, #604]	; (8003d24 <UART_SetConfig+0x304>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d121      	bne.n	8003b10 <UART_SetConfig+0xf0>
 8003acc:	4b96      	ldr	r3, [pc, #600]	; (8003d28 <UART_SetConfig+0x308>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d816      	bhi.n	8003b08 <UART_SetConfig+0xe8>
 8003ada:	a201      	add	r2, pc, #4	; (adr r2, 8003ae0 <UART_SetConfig+0xc0>)
 8003adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae0:	08003af1 	.word	0x08003af1
 8003ae4:	08003afd 	.word	0x08003afd
 8003ae8:	08003af7 	.word	0x08003af7
 8003aec:	08003b03 	.word	0x08003b03
 8003af0:	2301      	movs	r3, #1
 8003af2:	76fb      	strb	r3, [r7, #27]
 8003af4:	e0e8      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003af6:	2302      	movs	r3, #2
 8003af8:	76fb      	strb	r3, [r7, #27]
 8003afa:	e0e5      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003afc:	2304      	movs	r3, #4
 8003afe:	76fb      	strb	r3, [r7, #27]
 8003b00:	e0e2      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003b02:	2308      	movs	r3, #8
 8003b04:	76fb      	strb	r3, [r7, #27]
 8003b06:	e0df      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003b08:	2310      	movs	r3, #16
 8003b0a:	76fb      	strb	r3, [r7, #27]
 8003b0c:	bf00      	nop
 8003b0e:	e0db      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a85      	ldr	r2, [pc, #532]	; (8003d2c <UART_SetConfig+0x30c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d134      	bne.n	8003b84 <UART_SetConfig+0x164>
 8003b1a:	4b83      	ldr	r3, [pc, #524]	; (8003d28 <UART_SetConfig+0x308>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b20:	f003 030c 	and.w	r3, r3, #12
 8003b24:	2b0c      	cmp	r3, #12
 8003b26:	d829      	bhi.n	8003b7c <UART_SetConfig+0x15c>
 8003b28:	a201      	add	r2, pc, #4	; (adr r2, 8003b30 <UART_SetConfig+0x110>)
 8003b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2e:	bf00      	nop
 8003b30:	08003b65 	.word	0x08003b65
 8003b34:	08003b7d 	.word	0x08003b7d
 8003b38:	08003b7d 	.word	0x08003b7d
 8003b3c:	08003b7d 	.word	0x08003b7d
 8003b40:	08003b71 	.word	0x08003b71
 8003b44:	08003b7d 	.word	0x08003b7d
 8003b48:	08003b7d 	.word	0x08003b7d
 8003b4c:	08003b7d 	.word	0x08003b7d
 8003b50:	08003b6b 	.word	0x08003b6b
 8003b54:	08003b7d 	.word	0x08003b7d
 8003b58:	08003b7d 	.word	0x08003b7d
 8003b5c:	08003b7d 	.word	0x08003b7d
 8003b60:	08003b77 	.word	0x08003b77
 8003b64:	2300      	movs	r3, #0
 8003b66:	76fb      	strb	r3, [r7, #27]
 8003b68:	e0ae      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	76fb      	strb	r3, [r7, #27]
 8003b6e:	e0ab      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003b70:	2304      	movs	r3, #4
 8003b72:	76fb      	strb	r3, [r7, #27]
 8003b74:	e0a8      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003b76:	2308      	movs	r3, #8
 8003b78:	76fb      	strb	r3, [r7, #27]
 8003b7a:	e0a5      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	76fb      	strb	r3, [r7, #27]
 8003b80:	bf00      	nop
 8003b82:	e0a1      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a69      	ldr	r2, [pc, #420]	; (8003d30 <UART_SetConfig+0x310>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d120      	bne.n	8003bd0 <UART_SetConfig+0x1b0>
 8003b8e:	4b66      	ldr	r3, [pc, #408]	; (8003d28 <UART_SetConfig+0x308>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d00f      	beq.n	8003bbc <UART_SetConfig+0x19c>
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d802      	bhi.n	8003ba6 <UART_SetConfig+0x186>
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <UART_SetConfig+0x190>
 8003ba4:	e010      	b.n	8003bc8 <UART_SetConfig+0x1a8>
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d005      	beq.n	8003bb6 <UART_SetConfig+0x196>
 8003baa:	2b30      	cmp	r3, #48	; 0x30
 8003bac:	d009      	beq.n	8003bc2 <UART_SetConfig+0x1a2>
 8003bae:	e00b      	b.n	8003bc8 <UART_SetConfig+0x1a8>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	76fb      	strb	r3, [r7, #27]
 8003bb4:	e088      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	76fb      	strb	r3, [r7, #27]
 8003bba:	e085      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	76fb      	strb	r3, [r7, #27]
 8003bc0:	e082      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	76fb      	strb	r3, [r7, #27]
 8003bc6:	e07f      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003bc8:	2310      	movs	r3, #16
 8003bca:	76fb      	strb	r3, [r7, #27]
 8003bcc:	bf00      	nop
 8003bce:	e07b      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a57      	ldr	r2, [pc, #348]	; (8003d34 <UART_SetConfig+0x314>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d120      	bne.n	8003c1c <UART_SetConfig+0x1fc>
 8003bda:	4b53      	ldr	r3, [pc, #332]	; (8003d28 <UART_SetConfig+0x308>)
 8003bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003be4:	2b40      	cmp	r3, #64	; 0x40
 8003be6:	d00f      	beq.n	8003c08 <UART_SetConfig+0x1e8>
 8003be8:	2b40      	cmp	r3, #64	; 0x40
 8003bea:	d802      	bhi.n	8003bf2 <UART_SetConfig+0x1d2>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <UART_SetConfig+0x1dc>
 8003bf0:	e010      	b.n	8003c14 <UART_SetConfig+0x1f4>
 8003bf2:	2b80      	cmp	r3, #128	; 0x80
 8003bf4:	d005      	beq.n	8003c02 <UART_SetConfig+0x1e2>
 8003bf6:	2bc0      	cmp	r3, #192	; 0xc0
 8003bf8:	d009      	beq.n	8003c0e <UART_SetConfig+0x1ee>
 8003bfa:	e00b      	b.n	8003c14 <UART_SetConfig+0x1f4>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	76fb      	strb	r3, [r7, #27]
 8003c00:	e062      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003c02:	2302      	movs	r3, #2
 8003c04:	76fb      	strb	r3, [r7, #27]
 8003c06:	e05f      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003c08:	2304      	movs	r3, #4
 8003c0a:	76fb      	strb	r3, [r7, #27]
 8003c0c:	e05c      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003c0e:	2308      	movs	r3, #8
 8003c10:	76fb      	strb	r3, [r7, #27]
 8003c12:	e059      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003c14:	2310      	movs	r3, #16
 8003c16:	76fb      	strb	r3, [r7, #27]
 8003c18:	bf00      	nop
 8003c1a:	e055      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a45      	ldr	r2, [pc, #276]	; (8003d38 <UART_SetConfig+0x318>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d124      	bne.n	8003c70 <UART_SetConfig+0x250>
 8003c26:	4b40      	ldr	r3, [pc, #256]	; (8003d28 <UART_SetConfig+0x308>)
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c34:	d012      	beq.n	8003c5c <UART_SetConfig+0x23c>
 8003c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c3a:	d802      	bhi.n	8003c42 <UART_SetConfig+0x222>
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d007      	beq.n	8003c50 <UART_SetConfig+0x230>
 8003c40:	e012      	b.n	8003c68 <UART_SetConfig+0x248>
 8003c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c46:	d006      	beq.n	8003c56 <UART_SetConfig+0x236>
 8003c48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c4c:	d009      	beq.n	8003c62 <UART_SetConfig+0x242>
 8003c4e:	e00b      	b.n	8003c68 <UART_SetConfig+0x248>
 8003c50:	2300      	movs	r3, #0
 8003c52:	76fb      	strb	r3, [r7, #27]
 8003c54:	e038      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003c56:	2302      	movs	r3, #2
 8003c58:	76fb      	strb	r3, [r7, #27]
 8003c5a:	e035      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	76fb      	strb	r3, [r7, #27]
 8003c60:	e032      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003c62:	2308      	movs	r3, #8
 8003c64:	76fb      	strb	r3, [r7, #27]
 8003c66:	e02f      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003c68:	2310      	movs	r3, #16
 8003c6a:	76fb      	strb	r3, [r7, #27]
 8003c6c:	bf00      	nop
 8003c6e:	e02b      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a2a      	ldr	r2, [pc, #168]	; (8003d20 <UART_SetConfig+0x300>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d124      	bne.n	8003cc4 <UART_SetConfig+0x2a4>
 8003c7a:	4b2b      	ldr	r3, [pc, #172]	; (8003d28 <UART_SetConfig+0x308>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c88:	d012      	beq.n	8003cb0 <UART_SetConfig+0x290>
 8003c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c8e:	d802      	bhi.n	8003c96 <UART_SetConfig+0x276>
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d007      	beq.n	8003ca4 <UART_SetConfig+0x284>
 8003c94:	e012      	b.n	8003cbc <UART_SetConfig+0x29c>
 8003c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c9a:	d006      	beq.n	8003caa <UART_SetConfig+0x28a>
 8003c9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ca0:	d009      	beq.n	8003cb6 <UART_SetConfig+0x296>
 8003ca2:	e00b      	b.n	8003cbc <UART_SetConfig+0x29c>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	76fb      	strb	r3, [r7, #27]
 8003ca8:	e00e      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003caa:	2302      	movs	r3, #2
 8003cac:	76fb      	strb	r3, [r7, #27]
 8003cae:	e00b      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	76fb      	strb	r3, [r7, #27]
 8003cb4:	e008      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003cb6:	2308      	movs	r3, #8
 8003cb8:	76fb      	strb	r3, [r7, #27]
 8003cba:	e005      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	76fb      	strb	r3, [r7, #27]
 8003cc0:	bf00      	nop
 8003cc2:	e001      	b.n	8003cc8 <UART_SetConfig+0x2a8>
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a14      	ldr	r2, [pc, #80]	; (8003d20 <UART_SetConfig+0x300>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	f040 80a1 	bne.w	8003e16 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cd4:	7efb      	ldrb	r3, [r7, #27]
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d836      	bhi.n	8003d48 <UART_SetConfig+0x328>
 8003cda:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <UART_SetConfig+0x2c0>)
 8003cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce0:	08003d05 	.word	0x08003d05
 8003ce4:	08003d49 	.word	0x08003d49
 8003ce8:	08003d0d 	.word	0x08003d0d
 8003cec:	08003d49 	.word	0x08003d49
 8003cf0:	08003d13 	.word	0x08003d13
 8003cf4:	08003d49 	.word	0x08003d49
 8003cf8:	08003d49 	.word	0x08003d49
 8003cfc:	08003d49 	.word	0x08003d49
 8003d00:	08003d41 	.word	0x08003d41
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d04:	f7fe fb5e 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8003d08:	6178      	str	r0, [r7, #20]
        break;
 8003d0a:	e022      	b.n	8003d52 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <UART_SetConfig+0x31c>)
 8003d0e:	617b      	str	r3, [r7, #20]
        break;
 8003d10:	e01f      	b.n	8003d52 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d12:	f7fe fae9 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 8003d16:	6178      	str	r0, [r7, #20]
        break;
 8003d18:	e01b      	b.n	8003d52 <UART_SetConfig+0x332>
 8003d1a:	bf00      	nop
 8003d1c:	cfff69f3 	.word	0xcfff69f3
 8003d20:	40008000 	.word	0x40008000
 8003d24:	40013800 	.word	0x40013800
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	40004400 	.word	0x40004400
 8003d30:	40004800 	.word	0x40004800
 8003d34:	40004c00 	.word	0x40004c00
 8003d38:	40005000 	.word	0x40005000
 8003d3c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d44:	617b      	str	r3, [r7, #20]
        break;
 8003d46:	e004      	b.n	8003d52 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	76bb      	strb	r3, [r7, #26]
        break;
 8003d50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 811d 	beq.w	8003f94 <UART_SetConfig+0x574>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	4a97      	ldr	r2, [pc, #604]	; (8003fbc <UART_SetConfig+0x59c>)
 8003d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d64:	461a      	mov	r2, r3
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d6c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	4413      	add	r3, r2
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d305      	bcc.n	8003d8a <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d902      	bls.n	8003d90 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	76bb      	strb	r3, [r7, #26]
 8003d8e:	e101      	b.n	8003f94 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f04f 0100 	mov.w	r1, #0
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	4a87      	ldr	r2, [pc, #540]	; (8003fbc <UART_SetConfig+0x59c>)
 8003d9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	f04f 0400 	mov.w	r4, #0
 8003da8:	461a      	mov	r2, r3
 8003daa:	4623      	mov	r3, r4
 8003dac:	f7fc fa38 	bl	8000220 <__aeabi_uldivmod>
 8003db0:	4603      	mov	r3, r0
 8003db2:	460c      	mov	r4, r1
 8003db4:	4619      	mov	r1, r3
 8003db6:	4622      	mov	r2, r4
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	f04f 0400 	mov.w	r4, #0
 8003dc0:	0214      	lsls	r4, r2, #8
 8003dc2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003dc6:	020b      	lsls	r3, r1, #8
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6852      	ldr	r2, [r2, #4]
 8003dcc:	0852      	lsrs	r2, r2, #1
 8003dce:	4611      	mov	r1, r2
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	eb13 0b01 	adds.w	fp, r3, r1
 8003dd8:	eb44 0c02 	adc.w	ip, r4, r2
 8003ddc:	4658      	mov	r0, fp
 8003dde:	4661      	mov	r1, ip
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f04f 0400 	mov.w	r4, #0
 8003de8:	461a      	mov	r2, r3
 8003dea:	4623      	mov	r3, r4
 8003dec:	f7fc fa18 	bl	8000220 <__aeabi_uldivmod>
 8003df0:	4603      	mov	r3, r0
 8003df2:	460c      	mov	r4, r1
 8003df4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dfc:	d308      	bcc.n	8003e10 <UART_SetConfig+0x3f0>
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e04:	d204      	bcs.n	8003e10 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	e0c1      	b.n	8003f94 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	76bb      	strb	r3, [r7, #26]
 8003e14:	e0be      	b.n	8003f94 <UART_SetConfig+0x574>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e1e:	d164      	bne.n	8003eea <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8003e20:	7efb      	ldrb	r3, [r7, #27]
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d827      	bhi.n	8003e76 <UART_SetConfig+0x456>
 8003e26:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <UART_SetConfig+0x40c>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003e51 	.word	0x08003e51
 8003e30:	08003e59 	.word	0x08003e59
 8003e34:	08003e61 	.word	0x08003e61
 8003e38:	08003e77 	.word	0x08003e77
 8003e3c:	08003e67 	.word	0x08003e67
 8003e40:	08003e77 	.word	0x08003e77
 8003e44:	08003e77 	.word	0x08003e77
 8003e48:	08003e77 	.word	0x08003e77
 8003e4c:	08003e6f 	.word	0x08003e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e50:	f7fe fab8 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8003e54:	6178      	str	r0, [r7, #20]
        break;
 8003e56:	e013      	b.n	8003e80 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e58:	f7fe faca 	bl	80023f0 <HAL_RCC_GetPCLK2Freq>
 8003e5c:	6178      	str	r0, [r7, #20]
        break;
 8003e5e:	e00f      	b.n	8003e80 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e60:	4b57      	ldr	r3, [pc, #348]	; (8003fc0 <UART_SetConfig+0x5a0>)
 8003e62:	617b      	str	r3, [r7, #20]
        break;
 8003e64:	e00c      	b.n	8003e80 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e66:	f7fe fa3f 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 8003e6a:	6178      	str	r0, [r7, #20]
        break;
 8003e6c:	e008      	b.n	8003e80 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e72:	617b      	str	r3, [r7, #20]
        break;
 8003e74:	e004      	b.n	8003e80 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	76bb      	strb	r3, [r7, #26]
        break;
 8003e7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 8086 	beq.w	8003f94 <UART_SetConfig+0x574>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	4a4b      	ldr	r2, [pc, #300]	; (8003fbc <UART_SetConfig+0x59c>)
 8003e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e92:	461a      	mov	r2, r3
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e9a:	005a      	lsls	r2, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	085b      	lsrs	r3, r3, #1
 8003ea2:	441a      	add	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	2b0f      	cmp	r3, #15
 8003eb4:	d916      	bls.n	8003ee4 <UART_SetConfig+0x4c4>
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ebc:	d212      	bcs.n	8003ee4 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	f023 030f 	bic.w	r3, r3, #15
 8003ec6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	89fb      	ldrh	r3, [r7, #14]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	89fa      	ldrh	r2, [r7, #14]
 8003ee0:	60da      	str	r2, [r3, #12]
 8003ee2:	e057      	b.n	8003f94 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	76bb      	strb	r3, [r7, #26]
 8003ee8:	e054      	b.n	8003f94 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003eea:	7efb      	ldrb	r3, [r7, #27]
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d828      	bhi.n	8003f42 <UART_SetConfig+0x522>
 8003ef0:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <UART_SetConfig+0x4d8>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f1d 	.word	0x08003f1d
 8003efc:	08003f25 	.word	0x08003f25
 8003f00:	08003f2d 	.word	0x08003f2d
 8003f04:	08003f43 	.word	0x08003f43
 8003f08:	08003f33 	.word	0x08003f33
 8003f0c:	08003f43 	.word	0x08003f43
 8003f10:	08003f43 	.word	0x08003f43
 8003f14:	08003f43 	.word	0x08003f43
 8003f18:	08003f3b 	.word	0x08003f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f1c:	f7fe fa52 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8003f20:	6178      	str	r0, [r7, #20]
        break;
 8003f22:	e013      	b.n	8003f4c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f24:	f7fe fa64 	bl	80023f0 <HAL_RCC_GetPCLK2Freq>
 8003f28:	6178      	str	r0, [r7, #20]
        break;
 8003f2a:	e00f      	b.n	8003f4c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f2c:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <UART_SetConfig+0x5a0>)
 8003f2e:	617b      	str	r3, [r7, #20]
        break;
 8003f30:	e00c      	b.n	8003f4c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f32:	f7fe f9d9 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 8003f36:	6178      	str	r0, [r7, #20]
        break;
 8003f38:	e008      	b.n	8003f4c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f3e:	617b      	str	r3, [r7, #20]
        break;
 8003f40:	e004      	b.n	8003f4c <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	76bb      	strb	r3, [r7, #26]
        break;
 8003f4a:	bf00      	nop
    }

    if (pclk != 0U)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d020      	beq.n	8003f94 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	4a19      	ldr	r2, [pc, #100]	; (8003fbc <UART_SetConfig+0x59c>)
 8003f58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	441a      	add	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	2b0f      	cmp	r3, #15
 8003f7c:	d908      	bls.n	8003f90 <UART_SetConfig+0x570>
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f84:	d204      	bcs.n	8003f90 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	60da      	str	r2, [r3, #12]
 8003f8e:	e001      	b.n	8003f94 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003fb0:	7ebb      	ldrb	r3, [r7, #26]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3720      	adds	r7, #32
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003fbc:	0800619c 	.word	0x0800619c
 8003fc0:	00f42400 	.word	0x00f42400

08003fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	f003 0320 	and.w	r3, r3, #32
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d01a      	beq.n	80040da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040c2:	d10a      	bne.n	80040da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	605a      	str	r2, [r3, #4]
  }
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af02      	add	r7, sp, #8
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004118:	f7fc fee4 	bl	8000ee4 <HAL_GetTick>
 800411c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b08      	cmp	r3, #8
 800412a:	d10e      	bne.n	800414a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800412c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f82c 	bl	8004198 <UART_WaitOnFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e022      	b.n	8004190 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b04      	cmp	r3, #4
 8004156:	d10e      	bne.n	8004176 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004158:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f816 	bl	8004198 <UART_WaitOnFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e00c      	b.n	8004190 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2220      	movs	r2, #32
 800417a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2220      	movs	r2, #32
 8004182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	4613      	mov	r3, r2
 80041a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a8:	e062      	b.n	8004270 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041b0:	d05e      	beq.n	8004270 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b2:	f7fc fe97 	bl	8000ee4 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d302      	bcc.n	80041c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d11d      	bne.n	8004204 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041d6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0201 	bic.w	r2, r2, #1
 80041e6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e045      	b.n	8004290 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	d02e      	beq.n	8004270 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800421c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004220:	d126      	bne.n	8004270 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800422a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800423a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0201 	bic.w	r2, r2, #1
 800424a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e00f      	b.n	8004290 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	69da      	ldr	r2, [r3, #28]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	4013      	ands	r3, r2
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	429a      	cmp	r2, r3
 800427e:	bf0c      	ite	eq
 8004280:	2301      	moveq	r3, #1
 8004282:	2300      	movne	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	461a      	mov	r2, r3
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	429a      	cmp	r2, r3
 800428c:	d08d      	beq.n	80041aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_UARTEx_DisableFifoMode+0x16>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e027      	b.n	80042fe <HAL_UARTEx_DisableFifoMode+0x66>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2224      	movs	r2, #36	; 0x24
 80042ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0201 	bic.w	r2, r2, #1
 80042d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80042dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800431e:	2302      	movs	r3, #2
 8004320:	e02d      	b.n	800437e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2224      	movs	r2, #36	; 0x24
 800432e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0201 	bic.w	r2, r2, #1
 8004348:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f850 	bl	8004404 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800439a:	2302      	movs	r3, #2
 800439c:	e02d      	b.n	80043fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2224      	movs	r2, #36	; 0x24
 80043aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0201 	bic.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f812 	bl	8004404 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004404:	b480      	push	{r7}
 8004406:	b089      	sub	sp, #36	; 0x24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800440c:	4a2f      	ldr	r2, [pc, #188]	; (80044cc <UARTEx_SetNbDataToProcess+0xc8>)
 800440e:	f107 0314 	add.w	r3, r7, #20
 8004412:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004416:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800441a:	4a2d      	ldr	r2, [pc, #180]	; (80044d0 <UARTEx_SetNbDataToProcess+0xcc>)
 800441c:	f107 030c 	add.w	r3, r7, #12
 8004420:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004424:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800442c:	2b00      	cmp	r3, #0
 800442e:	d108      	bne.n	8004442 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004440:	e03d      	b.n	80044be <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004442:	2308      	movs	r3, #8
 8004444:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004446:	2308      	movs	r3, #8
 8004448:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	0e5b      	lsrs	r3, r3, #25
 8004452:	b2db      	uxtb	r3, r3
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	0f5b      	lsrs	r3, r3, #29
 8004462:	b2db      	uxtb	r3, r3
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800446a:	7fbb      	ldrb	r3, [r7, #30]
 800446c:	7f3a      	ldrb	r2, [r7, #28]
 800446e:	f107 0120 	add.w	r1, r7, #32
 8004472:	440a      	add	r2, r1
 8004474:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004478:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800447c:	7f3a      	ldrb	r2, [r7, #28]
 800447e:	f107 0120 	add.w	r1, r7, #32
 8004482:	440a      	add	r2, r1
 8004484:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004488:	fb93 f3f2 	sdiv	r3, r3, r2
 800448c:	b29a      	uxth	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004494:	7ffb      	ldrb	r3, [r7, #31]
 8004496:	7f7a      	ldrb	r2, [r7, #29]
 8004498:	f107 0120 	add.w	r1, r7, #32
 800449c:	440a      	add	r2, r1
 800449e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80044a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80044a6:	7f7a      	ldrb	r2, [r7, #29]
 80044a8:	f107 0120 	add.w	r1, r7, #32
 80044ac:	440a      	add	r2, r1
 80044ae:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80044be:	bf00      	nop
 80044c0:	3724      	adds	r7, #36	; 0x24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	0800616c 	.word	0x0800616c
 80044d0:	08006174 	.word	0x08006174

080044d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80044e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044e6:	2b84      	cmp	r3, #132	; 0x84
 80044e8:	d005      	beq.n	80044f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80044ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4413      	add	r3, r2
 80044f2:	3303      	adds	r3, #3
 80044f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80044f6:	68fb      	ldr	r3, [r7, #12]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004508:	f000 fa58 	bl	80049bc <vTaskStartScheduler>
  
  return osOK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	bd80      	pop	{r7, pc}

08004512 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004512:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004514:	b087      	sub	sp, #28
 8004516:	af02      	add	r7, sp, #8
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685c      	ldr	r4, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004528:	b29e      	uxth	r6, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff ffcf 	bl	80044d4 <makeFreeRtosPriority>
 8004536:	4602      	mov	r2, r0
 8004538:	f107 030c 	add.w	r3, r7, #12
 800453c:	9301      	str	r3, [sp, #4]
 800453e:	9200      	str	r2, [sp, #0]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	4632      	mov	r2, r6
 8004544:	4629      	mov	r1, r5
 8004546:	4620      	mov	r0, r4
 8004548:	f000 f8d2 	bl	80046f0 <xTaskCreate>
 800454c:	4603      	mov	r3, r0
 800454e:	2b01      	cmp	r3, #1
 8004550:	d001      	beq.n	8004556 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8004552:	2300      	movs	r3, #0
 8004554:	e000      	b.n	8004558 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8004556:	68fb      	ldr	r3, [r7, #12]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004560 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <osDelay+0x16>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	e000      	b.n	8004578 <osDelay+0x18>
 8004576:	2301      	movs	r3, #1
 8004578:	4618      	mov	r0, r3
 800457a:	f000 f9eb 	bl	8004954 <vTaskDelay>
  
  return osOK;
 800457e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f103 0208 	add.w	r2, r3, #8
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f103 0208 	add.w	r2, r3, #8
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f103 0208 	add.w	r2, r3, #8
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045e2:	b480      	push	{r7}
 80045e4:	b085      	sub	sp, #20
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	601a      	str	r2, [r3, #0]
}
 800461e:	bf00      	nop
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800462a:	b480      	push	{r7}
 800462c:	b085      	sub	sp, #20
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004640:	d103      	bne.n	800464a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	e00c      	b.n	8004664 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3308      	adds	r3, #8
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	e002      	b.n	8004658 <vListInsert+0x2e>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	429a      	cmp	r2, r3
 8004662:	d2f6      	bcs.n	8004652 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	601a      	str	r2, [r3, #0]
}
 8004690:	bf00      	nop
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6892      	ldr	r2, [r2, #8]
 80046b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6852      	ldr	r2, [r2, #4]
 80046bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d103      	bne.n	80046d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	1e5a      	subs	r2, r3, #1
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08c      	sub	sp, #48	; 0x30
 80046f4:	af04      	add	r7, sp, #16
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	4613      	mov	r3, r2
 80046fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004700:	88fb      	ldrh	r3, [r7, #6]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fe95 	bl	8005434 <pvPortMalloc>
 800470a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00e      	beq.n	8004730 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004712:	2054      	movs	r0, #84	; 0x54
 8004714:	f000 fe8e 	bl	8005434 <pvPortMalloc>
 8004718:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	631a      	str	r2, [r3, #48]	; 0x30
 8004726:	e005      	b.n	8004734 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004728:	6978      	ldr	r0, [r7, #20]
 800472a:	f000 ff45 	bl	80055b8 <vPortFree>
 800472e:	e001      	b.n	8004734 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004730:	2300      	movs	r3, #0
 8004732:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d013      	beq.n	8004762 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800473a:	88fa      	ldrh	r2, [r7, #6]
 800473c:	2300      	movs	r3, #0
 800473e:	9303      	str	r3, [sp, #12]
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	9302      	str	r3, [sp, #8]
 8004744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004746:	9301      	str	r3, [sp, #4]
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	68b9      	ldr	r1, [r7, #8]
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f80e 	bl	8004772 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004756:	69f8      	ldr	r0, [r7, #28]
 8004758:	f000 f892 	bl	8004880 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800475c:	2301      	movs	r3, #1
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	e002      	b.n	8004768 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004766:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004768:	69bb      	ldr	r3, [r7, #24]
	}
 800476a:	4618      	mov	r0, r3
 800476c:	3720      	adds	r7, #32
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b088      	sub	sp, #32
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
 800477e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800478a:	3b01      	subs	r3, #1
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	f023 0307 	bic.w	r3, r3, #7
 8004798:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d009      	beq.n	80047b8 <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	e7fe      	b.n	80047b6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d01f      	beq.n	80047fe <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047be:	2300      	movs	r3, #0
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	e012      	b.n	80047ea <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	4413      	add	r3, r2
 80047ca:	7819      	ldrb	r1, [r3, #0]
 80047cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	4413      	add	r3, r2
 80047d2:	3334      	adds	r3, #52	; 0x34
 80047d4:	460a      	mov	r2, r1
 80047d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	4413      	add	r3, r2
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d006      	beq.n	80047f2 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	3301      	adds	r3, #1
 80047e8:	61fb      	str	r3, [r7, #28]
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	2b0f      	cmp	r3, #15
 80047ee:	d9e9      	bls.n	80047c4 <prvInitialiseNewTask+0x52>
 80047f0:	e000      	b.n	80047f4 <prvInitialiseNewTask+0x82>
			{
				break;
 80047f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047fc:	e003      	b.n	8004806 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	2b06      	cmp	r3, #6
 800480a:	d901      	bls.n	8004810 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800480c:	2306      	movs	r3, #6
 800480e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004814:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800481a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800481c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481e:	2200      	movs	r2, #0
 8004820:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	3304      	adds	r3, #4
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff fece 	bl	80045c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482e:	3318      	adds	r3, #24
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff fec9 	bl	80045c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800483a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	f1c3 0207 	rsb	r2, r3, #7
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800484a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800484c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484e:	2200      	movs	r2, #0
 8004850:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	68f9      	ldr	r1, [r7, #12]
 800485e:	69b8      	ldr	r0, [r7, #24]
 8004860:	f000 fbe6 	bl	8005030 <pxPortInitialiseStack>
 8004864:	4602      	mov	r2, r0
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800486a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004876:	bf00      	nop
 8004878:	3720      	adds	r7, #32
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004888:	f000 fcf8 	bl	800527c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800488c:	4b2a      	ldr	r3, [pc, #168]	; (8004938 <prvAddNewTaskToReadyList+0xb8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3301      	adds	r3, #1
 8004892:	4a29      	ldr	r2, [pc, #164]	; (8004938 <prvAddNewTaskToReadyList+0xb8>)
 8004894:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004896:	4b29      	ldr	r3, [pc, #164]	; (800493c <prvAddNewTaskToReadyList+0xbc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d109      	bne.n	80048b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800489e:	4a27      	ldr	r2, [pc, #156]	; (800493c <prvAddNewTaskToReadyList+0xbc>)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048a4:	4b24      	ldr	r3, [pc, #144]	; (8004938 <prvAddNewTaskToReadyList+0xb8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d110      	bne.n	80048ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048ac:	f000 faa0 	bl	8004df0 <prvInitialiseTaskLists>
 80048b0:	e00d      	b.n	80048ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048b2:	4b23      	ldr	r3, [pc, #140]	; (8004940 <prvAddNewTaskToReadyList+0xc0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048ba:	4b20      	ldr	r3, [pc, #128]	; (800493c <prvAddNewTaskToReadyList+0xbc>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d802      	bhi.n	80048ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048c8:	4a1c      	ldr	r2, [pc, #112]	; (800493c <prvAddNewTaskToReadyList+0xbc>)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048ce:	4b1d      	ldr	r3, [pc, #116]	; (8004944 <prvAddNewTaskToReadyList+0xc4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3301      	adds	r3, #1
 80048d4:	4a1b      	ldr	r2, [pc, #108]	; (8004944 <prvAddNewTaskToReadyList+0xc4>)
 80048d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	2201      	movs	r2, #1
 80048de:	409a      	lsls	r2, r3
 80048e0:	4b19      	ldr	r3, [pc, #100]	; (8004948 <prvAddNewTaskToReadyList+0xc8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	4a18      	ldr	r2, [pc, #96]	; (8004948 <prvAddNewTaskToReadyList+0xc8>)
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ee:	4613      	mov	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4a15      	ldr	r2, [pc, #84]	; (800494c <prvAddNewTaskToReadyList+0xcc>)
 80048f8:	441a      	add	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3304      	adds	r3, #4
 80048fe:	4619      	mov	r1, r3
 8004900:	4610      	mov	r0, r2
 8004902:	f7ff fe6e 	bl	80045e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004906:	f000 fce7 	bl	80052d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800490a:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <prvAddNewTaskToReadyList+0xc0>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00e      	beq.n	8004930 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004912:	4b0a      	ldr	r3, [pc, #40]	; (800493c <prvAddNewTaskToReadyList+0xbc>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	429a      	cmp	r2, r3
 800491e:	d207      	bcs.n	8004930 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004920:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <prvAddNewTaskToReadyList+0xd0>)
 8004922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004930:	bf00      	nop
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	200001c4 	.word	0x200001c4
 800493c:	200000c4 	.word	0x200000c4
 8004940:	200001d0 	.word	0x200001d0
 8004944:	200001e0 	.word	0x200001e0
 8004948:	200001cc 	.word	0x200001cc
 800494c:	200000c8 	.word	0x200000c8
 8004950:	e000ed04 	.word	0xe000ed04

08004954 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d016      	beq.n	8004994 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004966:	4b13      	ldr	r3, [pc, #76]	; (80049b4 <vTaskDelay+0x60>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d009      	beq.n	8004982 <vTaskDelay+0x2e>
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	60bb      	str	r3, [r7, #8]
 8004980:	e7fe      	b.n	8004980 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004982:	f000 f861 	bl	8004a48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004986:	2100      	movs	r1, #0
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 faeb 	bl	8004f64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800498e:	f000 f869 	bl	8004a64 <xTaskResumeAll>
 8004992:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d107      	bne.n	80049aa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800499a:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <vTaskDelay+0x64>)
 800499c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049aa:	bf00      	nop
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	200001ec 	.word	0x200001ec
 80049b8:	e000ed04 	.word	0xe000ed04

080049bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80049c2:	4b1b      	ldr	r3, [pc, #108]	; (8004a30 <vTaskStartScheduler+0x74>)
 80049c4:	9301      	str	r3, [sp, #4]
 80049c6:	2300      	movs	r3, #0
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	2300      	movs	r3, #0
 80049cc:	2280      	movs	r2, #128	; 0x80
 80049ce:	4919      	ldr	r1, [pc, #100]	; (8004a34 <vTaskStartScheduler+0x78>)
 80049d0:	4819      	ldr	r0, [pc, #100]	; (8004a38 <vTaskStartScheduler+0x7c>)
 80049d2:	f7ff fe8d 	bl	80046f0 <xTaskCreate>
 80049d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d115      	bne.n	8004a0a <vTaskStartScheduler+0x4e>
 80049de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049f0:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <vTaskStartScheduler+0x80>)
 80049f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049f8:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <vTaskStartScheduler+0x84>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049fe:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <vTaskStartScheduler+0x88>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a04:	f000 fb9c 	bl	8005140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a08:	e00d      	b.n	8004a26 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a10:	d109      	bne.n	8004a26 <vTaskStartScheduler+0x6a>
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	607b      	str	r3, [r7, #4]
 8004a24:	e7fe      	b.n	8004a24 <vTaskStartScheduler+0x68>
}
 8004a26:	bf00      	nop
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	200001e8 	.word	0x200001e8
 8004a34:	0800617c 	.word	0x0800617c
 8004a38:	08004dc1 	.word	0x08004dc1
 8004a3c:	200001e4 	.word	0x200001e4
 8004a40:	200001d0 	.word	0x200001d0
 8004a44:	200001c8 	.word	0x200001c8

08004a48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a4c:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <vTaskSuspendAll+0x18>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3301      	adds	r3, #1
 8004a52:	4a03      	ldr	r2, [pc, #12]	; (8004a60 <vTaskSuspendAll+0x18>)
 8004a54:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004a56:	bf00      	nop
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	200001ec 	.word	0x200001ec

08004a64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a72:	4b41      	ldr	r3, [pc, #260]	; (8004b78 <xTaskResumeAll+0x114>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d109      	bne.n	8004a8e <xTaskResumeAll+0x2a>
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	e7fe      	b.n	8004a8c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a8e:	f000 fbf5 	bl	800527c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a92:	4b39      	ldr	r3, [pc, #228]	; (8004b78 <xTaskResumeAll+0x114>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	4a37      	ldr	r2, [pc, #220]	; (8004b78 <xTaskResumeAll+0x114>)
 8004a9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a9c:	4b36      	ldr	r3, [pc, #216]	; (8004b78 <xTaskResumeAll+0x114>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d161      	bne.n	8004b68 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004aa4:	4b35      	ldr	r3, [pc, #212]	; (8004b7c <xTaskResumeAll+0x118>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d05d      	beq.n	8004b68 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004aac:	e02e      	b.n	8004b0c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aae:	4b34      	ldr	r3, [pc, #208]	; (8004b80 <xTaskResumeAll+0x11c>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3318      	adds	r3, #24
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff fdee 	bl	800469c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff fde9 	bl	800469c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	2201      	movs	r2, #1
 8004ad0:	409a      	lsls	r2, r3
 8004ad2:	4b2c      	ldr	r3, [pc, #176]	; (8004b84 <xTaskResumeAll+0x120>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	4a2a      	ldr	r2, [pc, #168]	; (8004b84 <xTaskResumeAll+0x120>)
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4a27      	ldr	r2, [pc, #156]	; (8004b88 <xTaskResumeAll+0x124>)
 8004aea:	441a      	add	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	3304      	adds	r3, #4
 8004af0:	4619      	mov	r1, r3
 8004af2:	4610      	mov	r0, r2
 8004af4:	f7ff fd75 	bl	80045e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afc:	4b23      	ldr	r3, [pc, #140]	; (8004b8c <xTaskResumeAll+0x128>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d302      	bcc.n	8004b0c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004b06:	4b22      	ldr	r3, [pc, #136]	; (8004b90 <xTaskResumeAll+0x12c>)
 8004b08:	2201      	movs	r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b0c:	4b1c      	ldr	r3, [pc, #112]	; (8004b80 <xTaskResumeAll+0x11c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1cc      	bne.n	8004aae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b1a:	f000 f9e5 	bl	8004ee8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b1e:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <xTaskResumeAll+0x130>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d010      	beq.n	8004b4c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b2a:	f000 f837 	bl	8004b9c <xTaskIncrementTick>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004b34:	4b16      	ldr	r3, [pc, #88]	; (8004b90 <xTaskResumeAll+0x12c>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f1      	bne.n	8004b2a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004b46:	4b13      	ldr	r3, [pc, #76]	; (8004b94 <xTaskResumeAll+0x130>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b4c:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <xTaskResumeAll+0x12c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d009      	beq.n	8004b68 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b54:	2301      	movs	r3, #1
 8004b56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b58:	4b0f      	ldr	r3, [pc, #60]	; (8004b98 <xTaskResumeAll+0x134>)
 8004b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b68:	f000 fbb6 	bl	80052d8 <vPortExitCritical>

	return xAlreadyYielded;
 8004b6c:	68bb      	ldr	r3, [r7, #8]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	200001ec 	.word	0x200001ec
 8004b7c:	200001c4 	.word	0x200001c4
 8004b80:	20000184 	.word	0x20000184
 8004b84:	200001cc 	.word	0x200001cc
 8004b88:	200000c8 	.word	0x200000c8
 8004b8c:	200000c4 	.word	0x200000c4
 8004b90:	200001d8 	.word	0x200001d8
 8004b94:	200001d4 	.word	0x200001d4
 8004b98:	e000ed04 	.word	0xe000ed04

08004b9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ba6:	4b4e      	ldr	r3, [pc, #312]	; (8004ce0 <xTaskIncrementTick+0x144>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f040 8087 	bne.w	8004cbe <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bb0:	4b4c      	ldr	r3, [pc, #304]	; (8004ce4 <xTaskIncrementTick+0x148>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004bb8:	4a4a      	ldr	r2, [pc, #296]	; (8004ce4 <xTaskIncrementTick+0x148>)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d11f      	bne.n	8004c04 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bc4:	4b48      	ldr	r3, [pc, #288]	; (8004ce8 <xTaskIncrementTick+0x14c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <xTaskIncrementTick+0x46>
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	603b      	str	r3, [r7, #0]
 8004be0:	e7fe      	b.n	8004be0 <xTaskIncrementTick+0x44>
 8004be2:	4b41      	ldr	r3, [pc, #260]	; (8004ce8 <xTaskIncrementTick+0x14c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	4b40      	ldr	r3, [pc, #256]	; (8004cec <xTaskIncrementTick+0x150>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a3e      	ldr	r2, [pc, #248]	; (8004ce8 <xTaskIncrementTick+0x14c>)
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	4a3e      	ldr	r2, [pc, #248]	; (8004cec <xTaskIncrementTick+0x150>)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	4b3e      	ldr	r3, [pc, #248]	; (8004cf0 <xTaskIncrementTick+0x154>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	4a3c      	ldr	r2, [pc, #240]	; (8004cf0 <xTaskIncrementTick+0x154>)
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	f000 f972 	bl	8004ee8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c04:	4b3b      	ldr	r3, [pc, #236]	; (8004cf4 <xTaskIncrementTick+0x158>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d348      	bcc.n	8004ca0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c0e:	4b36      	ldr	r3, [pc, #216]	; (8004ce8 <xTaskIncrementTick+0x14c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d104      	bne.n	8004c22 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c18:	4b36      	ldr	r3, [pc, #216]	; (8004cf4 <xTaskIncrementTick+0x158>)
 8004c1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c1e:	601a      	str	r2, [r3, #0]
					break;
 8004c20:	e03e      	b.n	8004ca0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c22:	4b31      	ldr	r3, [pc, #196]	; (8004ce8 <xTaskIncrementTick+0x14c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d203      	bcs.n	8004c42 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c3a:	4a2e      	ldr	r2, [pc, #184]	; (8004cf4 <xTaskIncrementTick+0x158>)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c40:	e02e      	b.n	8004ca0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	3304      	adds	r3, #4
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7ff fd28 	bl	800469c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d004      	beq.n	8004c5e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	3318      	adds	r3, #24
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff fd1f 	bl	800469c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	2201      	movs	r2, #1
 8004c64:	409a      	lsls	r2, r3
 8004c66:	4b24      	ldr	r3, [pc, #144]	; (8004cf8 <xTaskIncrementTick+0x15c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	4a22      	ldr	r2, [pc, #136]	; (8004cf8 <xTaskIncrementTick+0x15c>)
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4a1f      	ldr	r2, [pc, #124]	; (8004cfc <xTaskIncrementTick+0x160>)
 8004c7e:	441a      	add	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	3304      	adds	r3, #4
 8004c84:	4619      	mov	r1, r3
 8004c86:	4610      	mov	r0, r2
 8004c88:	f7ff fcab 	bl	80045e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c90:	4b1b      	ldr	r3, [pc, #108]	; (8004d00 <xTaskIncrementTick+0x164>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d3b9      	bcc.n	8004c0e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c9e:	e7b6      	b.n	8004c0e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ca0:	4b17      	ldr	r3, [pc, #92]	; (8004d00 <xTaskIncrementTick+0x164>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca6:	4915      	ldr	r1, [pc, #84]	; (8004cfc <xTaskIncrementTick+0x160>)
 8004ca8:	4613      	mov	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	440b      	add	r3, r1
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d907      	bls.n	8004cc8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	e004      	b.n	8004cc8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004cbe:	4b11      	ldr	r3, [pc, #68]	; (8004d04 <xTaskIncrementTick+0x168>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	4a0f      	ldr	r2, [pc, #60]	; (8004d04 <xTaskIncrementTick+0x168>)
 8004cc6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004cc8:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <xTaskIncrementTick+0x16c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004cd4:	697b      	ldr	r3, [r7, #20]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	200001ec 	.word	0x200001ec
 8004ce4:	200001c8 	.word	0x200001c8
 8004ce8:	2000017c 	.word	0x2000017c
 8004cec:	20000180 	.word	0x20000180
 8004cf0:	200001dc 	.word	0x200001dc
 8004cf4:	200001e4 	.word	0x200001e4
 8004cf8:	200001cc 	.word	0x200001cc
 8004cfc:	200000c8 	.word	0x200000c8
 8004d00:	200000c4 	.word	0x200000c4
 8004d04:	200001d4 	.word	0x200001d4
 8004d08:	200001d8 	.word	0x200001d8

08004d0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d12:	4b26      	ldr	r3, [pc, #152]	; (8004dac <vTaskSwitchContext+0xa0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d1a:	4b25      	ldr	r3, [pc, #148]	; (8004db0 <vTaskSwitchContext+0xa4>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d20:	e03e      	b.n	8004da0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004d22:	4b23      	ldr	r3, [pc, #140]	; (8004db0 <vTaskSwitchContext+0xa4>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d28:	4b22      	ldr	r3, [pc, #136]	; (8004db4 <vTaskSwitchContext+0xa8>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	fab3 f383 	clz	r3, r3
 8004d34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d36:	7afb      	ldrb	r3, [r7, #11]
 8004d38:	f1c3 031f 	rsb	r3, r3, #31
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	491e      	ldr	r1, [pc, #120]	; (8004db8 <vTaskSwitchContext+0xac>)
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <vTaskSwitchContext+0x5a>
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	607b      	str	r3, [r7, #4]
 8004d64:	e7fe      	b.n	8004d64 <vTaskSwitchContext+0x58>
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4a11      	ldr	r2, [pc, #68]	; (8004db8 <vTaskSwitchContext+0xac>)
 8004d72:	4413      	add	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	605a      	str	r2, [r3, #4]
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	3308      	adds	r3, #8
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d104      	bne.n	8004d96 <vTaskSwitchContext+0x8a>
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	605a      	str	r2, [r3, #4]
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	4a07      	ldr	r2, [pc, #28]	; (8004dbc <vTaskSwitchContext+0xb0>)
 8004d9e:	6013      	str	r3, [r2, #0]
}
 8004da0:	bf00      	nop
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	200001ec 	.word	0x200001ec
 8004db0:	200001d8 	.word	0x200001d8
 8004db4:	200001cc 	.word	0x200001cc
 8004db8:	200000c8 	.word	0x200000c8
 8004dbc:	200000c4 	.word	0x200000c4

08004dc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004dc8:	f000 f852 	bl	8004e70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <prvIdleTask+0x28>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d9f9      	bls.n	8004dc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004dd4:	4b05      	ldr	r3, [pc, #20]	; (8004dec <prvIdleTask+0x2c>)
 8004dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004de4:	e7f0      	b.n	8004dc8 <prvIdleTask+0x8>
 8004de6:	bf00      	nop
 8004de8:	200000c8 	.word	0x200000c8
 8004dec:	e000ed04 	.word	0xe000ed04

08004df0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004df6:	2300      	movs	r3, #0
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	e00c      	b.n	8004e16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4a12      	ldr	r2, [pc, #72]	; (8004e50 <prvInitialiseTaskLists+0x60>)
 8004e08:	4413      	add	r3, r2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff fbbc 	bl	8004588 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3301      	adds	r3, #1
 8004e14:	607b      	str	r3, [r7, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b06      	cmp	r3, #6
 8004e1a:	d9ef      	bls.n	8004dfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e1c:	480d      	ldr	r0, [pc, #52]	; (8004e54 <prvInitialiseTaskLists+0x64>)
 8004e1e:	f7ff fbb3 	bl	8004588 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e22:	480d      	ldr	r0, [pc, #52]	; (8004e58 <prvInitialiseTaskLists+0x68>)
 8004e24:	f7ff fbb0 	bl	8004588 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e28:	480c      	ldr	r0, [pc, #48]	; (8004e5c <prvInitialiseTaskLists+0x6c>)
 8004e2a:	f7ff fbad 	bl	8004588 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e2e:	480c      	ldr	r0, [pc, #48]	; (8004e60 <prvInitialiseTaskLists+0x70>)
 8004e30:	f7ff fbaa 	bl	8004588 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e34:	480b      	ldr	r0, [pc, #44]	; (8004e64 <prvInitialiseTaskLists+0x74>)
 8004e36:	f7ff fba7 	bl	8004588 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <prvInitialiseTaskLists+0x78>)
 8004e3c:	4a05      	ldr	r2, [pc, #20]	; (8004e54 <prvInitialiseTaskLists+0x64>)
 8004e3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e40:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <prvInitialiseTaskLists+0x7c>)
 8004e42:	4a05      	ldr	r2, [pc, #20]	; (8004e58 <prvInitialiseTaskLists+0x68>)
 8004e44:	601a      	str	r2, [r3, #0]
}
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	200000c8 	.word	0x200000c8
 8004e54:	20000154 	.word	0x20000154
 8004e58:	20000168 	.word	0x20000168
 8004e5c:	20000184 	.word	0x20000184
 8004e60:	20000198 	.word	0x20000198
 8004e64:	200001b0 	.word	0x200001b0
 8004e68:	2000017c 	.word	0x2000017c
 8004e6c:	20000180 	.word	0x20000180

08004e70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e76:	e019      	b.n	8004eac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e78:	f000 fa00 	bl	800527c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e7c:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <prvCheckTasksWaitingTermination+0x4c>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3304      	adds	r3, #4
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff fc07 	bl	800469c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ec0 <prvCheckTasksWaitingTermination+0x50>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	4a0a      	ldr	r2, [pc, #40]	; (8004ec0 <prvCheckTasksWaitingTermination+0x50>)
 8004e96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e98:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <prvCheckTasksWaitingTermination+0x54>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	4a09      	ldr	r2, [pc, #36]	; (8004ec4 <prvCheckTasksWaitingTermination+0x54>)
 8004ea0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ea2:	f000 fa19 	bl	80052d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f80e 	bl	8004ec8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <prvCheckTasksWaitingTermination+0x54>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e1      	bne.n	8004e78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004eb4:	bf00      	nop
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000198 	.word	0x20000198
 8004ec0:	200001c4 	.word	0x200001c4
 8004ec4:	200001ac 	.word	0x200001ac

08004ec8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 fb6f 	bl	80055b8 <vPortFree>
			vPortFree( pxTCB );
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fb6c 	bl	80055b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ee0:	bf00      	nop
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eee:	4b0c      	ldr	r3, [pc, #48]	; (8004f20 <prvResetNextTaskUnblockTime+0x38>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d104      	bne.n	8004f02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <prvResetNextTaskUnblockTime+0x3c>)
 8004efa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004efe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f00:	e008      	b.n	8004f14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f02:	4b07      	ldr	r3, [pc, #28]	; (8004f20 <prvResetNextTaskUnblockTime+0x38>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	4a04      	ldr	r2, [pc, #16]	; (8004f24 <prvResetNextTaskUnblockTime+0x3c>)
 8004f12:	6013      	str	r3, [r2, #0]
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	2000017c 	.word	0x2000017c
 8004f24:	200001e4 	.word	0x200001e4

08004f28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f2e:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <xTaskGetSchedulerState+0x34>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d102      	bne.n	8004f3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f36:	2301      	movs	r3, #1
 8004f38:	607b      	str	r3, [r7, #4]
 8004f3a:	e008      	b.n	8004f4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f3c:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <xTaskGetSchedulerState+0x38>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d102      	bne.n	8004f4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f44:	2302      	movs	r3, #2
 8004f46:	607b      	str	r3, [r7, #4]
 8004f48:	e001      	b.n	8004f4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f4e:	687b      	ldr	r3, [r7, #4]
	}
 8004f50:	4618      	mov	r0, r3
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	200001d0 	.word	0x200001d0
 8004f60:	200001ec 	.word	0x200001ec

08004f64 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f6e:	4b29      	ldr	r3, [pc, #164]	; (8005014 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f74:	4b28      	ldr	r3, [pc, #160]	; (8005018 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff fb8e 	bl	800469c <uxListRemove>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10b      	bne.n	8004f9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004f86:	4b24      	ldr	r3, [pc, #144]	; (8005018 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	43da      	mvns	r2, r3
 8004f94:	4b21      	ldr	r3, [pc, #132]	; (800501c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	4a20      	ldr	r2, [pc, #128]	; (800501c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fa4:	d10a      	bne.n	8004fbc <prvAddCurrentTaskToDelayedList+0x58>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d007      	beq.n	8004fbc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fac:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	481a      	ldr	r0, [pc, #104]	; (8005020 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004fb6:	f7ff fb14 	bl	80045e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fba:	e026      	b.n	800500a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fc4:	4b14      	ldr	r3, [pc, #80]	; (8005018 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d209      	bcs.n	8004fe8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fd4:	4b13      	ldr	r3, [pc, #76]	; (8005024 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	4b0f      	ldr	r3, [pc, #60]	; (8005018 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	f7ff fb22 	bl	800462a <vListInsert>
}
 8004fe6:	e010      	b.n	800500a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fe8:	4b0f      	ldr	r3, [pc, #60]	; (8005028 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	f7ff fb18 	bl	800462a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ffa:	4b0c      	ldr	r3, [pc, #48]	; (800502c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	429a      	cmp	r2, r3
 8005002:	d202      	bcs.n	800500a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005004:	4a09      	ldr	r2, [pc, #36]	; (800502c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	6013      	str	r3, [r2, #0]
}
 800500a:	bf00      	nop
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	200001c8 	.word	0x200001c8
 8005018:	200000c4 	.word	0x200000c4
 800501c:	200001cc 	.word	0x200001cc
 8005020:	200001b0 	.word	0x200001b0
 8005024:	20000180 	.word	0x20000180
 8005028:	2000017c 	.word	0x2000017c
 800502c:	200001e4 	.word	0x200001e4

08005030 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3b04      	subs	r3, #4
 8005040:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005048:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3b04      	subs	r3, #4
 800504e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f023 0201 	bic.w	r2, r3, #1
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3b04      	subs	r3, #4
 800505e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005060:	4a0c      	ldr	r2, [pc, #48]	; (8005094 <pxPortInitialiseStack+0x64>)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3b14      	subs	r3, #20
 800506a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	3b04      	subs	r3, #4
 8005076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f06f 0202 	mvn.w	r2, #2
 800507e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3b20      	subs	r3, #32
 8005084:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005086:	68fb      	ldr	r3, [r7, #12]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	08005099 	.word	0x08005099

08005098 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800509e:	2300      	movs	r3, #0
 80050a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050a2:	4b11      	ldr	r3, [pc, #68]	; (80050e8 <prvTaskExitError+0x50>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050aa:	d009      	beq.n	80050c0 <prvTaskExitError+0x28>
 80050ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	e7fe      	b.n	80050be <prvTaskExitError+0x26>
 80050c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050d2:	bf00      	nop
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0fc      	beq.n	80050d4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050da:	bf00      	nop
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	2000000c 	.word	0x2000000c
 80050ec:	00000000 	.word	0x00000000

080050f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050f0:	4b07      	ldr	r3, [pc, #28]	; (8005110 <pxCurrentTCBConst2>)
 80050f2:	6819      	ldr	r1, [r3, #0]
 80050f4:	6808      	ldr	r0, [r1, #0]
 80050f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fa:	f380 8809 	msr	PSP, r0
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f04f 0000 	mov.w	r0, #0
 8005106:	f380 8811 	msr	BASEPRI, r0
 800510a:	4770      	bx	lr
 800510c:	f3af 8000 	nop.w

08005110 <pxCurrentTCBConst2>:
 8005110:	200000c4 	.word	0x200000c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop

08005118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005118:	4808      	ldr	r0, [pc, #32]	; (800513c <prvPortStartFirstTask+0x24>)
 800511a:	6800      	ldr	r0, [r0, #0]
 800511c:	6800      	ldr	r0, [r0, #0]
 800511e:	f380 8808 	msr	MSP, r0
 8005122:	f04f 0000 	mov.w	r0, #0
 8005126:	f380 8814 	msr	CONTROL, r0
 800512a:	b662      	cpsie	i
 800512c:	b661      	cpsie	f
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	df00      	svc	0
 8005138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800513a:	bf00      	nop
 800513c:	e000ed08 	.word	0xe000ed08

08005140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005146:	4b44      	ldr	r3, [pc, #272]	; (8005258 <xPortStartScheduler+0x118>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a44      	ldr	r2, [pc, #272]	; (800525c <xPortStartScheduler+0x11c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d109      	bne.n	8005164 <xPortStartScheduler+0x24>
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	e7fe      	b.n	8005162 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005164:	4b3c      	ldr	r3, [pc, #240]	; (8005258 <xPortStartScheduler+0x118>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a3d      	ldr	r2, [pc, #244]	; (8005260 <xPortStartScheduler+0x120>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d109      	bne.n	8005182 <xPortStartScheduler+0x42>
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	e7fe      	b.n	8005180 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005182:	4b38      	ldr	r3, [pc, #224]	; (8005264 <xPortStartScheduler+0x124>)
 8005184:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	b2db      	uxtb	r3, r3
 800518c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	22ff      	movs	r2, #255	; 0xff
 8005192:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800519c:	78fb      	ldrb	r3, [r7, #3]
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	4b30      	ldr	r3, [pc, #192]	; (8005268 <xPortStartScheduler+0x128>)
 80051a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051aa:	4b30      	ldr	r3, [pc, #192]	; (800526c <xPortStartScheduler+0x12c>)
 80051ac:	2207      	movs	r2, #7
 80051ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051b0:	e009      	b.n	80051c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80051b2:	4b2e      	ldr	r3, [pc, #184]	; (800526c <xPortStartScheduler+0x12c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	4a2c      	ldr	r2, [pc, #176]	; (800526c <xPortStartScheduler+0x12c>)
 80051ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051bc:	78fb      	ldrb	r3, [r7, #3]
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051c6:	78fb      	ldrb	r3, [r7, #3]
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ce:	2b80      	cmp	r3, #128	; 0x80
 80051d0:	d0ef      	beq.n	80051b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051d2:	4b26      	ldr	r3, [pc, #152]	; (800526c <xPortStartScheduler+0x12c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f1c3 0307 	rsb	r3, r3, #7
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d009      	beq.n	80051f2 <xPortStartScheduler+0xb2>
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	60bb      	str	r3, [r7, #8]
 80051f0:	e7fe      	b.n	80051f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051f2:	4b1e      	ldr	r3, [pc, #120]	; (800526c <xPortStartScheduler+0x12c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	4a1c      	ldr	r2, [pc, #112]	; (800526c <xPortStartScheduler+0x12c>)
 80051fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051fc:	4b1b      	ldr	r3, [pc, #108]	; (800526c <xPortStartScheduler+0x12c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005204:	4a19      	ldr	r2, [pc, #100]	; (800526c <xPortStartScheduler+0x12c>)
 8005206:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	b2da      	uxtb	r2, r3
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005210:	4b17      	ldr	r3, [pc, #92]	; (8005270 <xPortStartScheduler+0x130>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a16      	ldr	r2, [pc, #88]	; (8005270 <xPortStartScheduler+0x130>)
 8005216:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800521a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800521c:	4b14      	ldr	r3, [pc, #80]	; (8005270 <xPortStartScheduler+0x130>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a13      	ldr	r2, [pc, #76]	; (8005270 <xPortStartScheduler+0x130>)
 8005222:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005226:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005228:	f000 f8d6 	bl	80053d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800522c:	4b11      	ldr	r3, [pc, #68]	; (8005274 <xPortStartScheduler+0x134>)
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005232:	f000 f8f5 	bl	8005420 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005236:	4b10      	ldr	r3, [pc, #64]	; (8005278 <xPortStartScheduler+0x138>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a0f      	ldr	r2, [pc, #60]	; (8005278 <xPortStartScheduler+0x138>)
 800523c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005240:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005242:	f7ff ff69 	bl	8005118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005246:	f7ff fd61 	bl	8004d0c <vTaskSwitchContext>
	prvTaskExitError();
 800524a:	f7ff ff25 	bl	8005098 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	e000ed00 	.word	0xe000ed00
 800525c:	410fc271 	.word	0x410fc271
 8005260:	410fc270 	.word	0x410fc270
 8005264:	e000e400 	.word	0xe000e400
 8005268:	200001f0 	.word	0x200001f0
 800526c:	200001f4 	.word	0x200001f4
 8005270:	e000ed20 	.word	0xe000ed20
 8005274:	2000000c 	.word	0x2000000c
 8005278:	e000ef34 	.word	0xe000ef34

0800527c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005294:	4b0e      	ldr	r3, [pc, #56]	; (80052d0 <vPortEnterCritical+0x54>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3301      	adds	r3, #1
 800529a:	4a0d      	ldr	r2, [pc, #52]	; (80052d0 <vPortEnterCritical+0x54>)
 800529c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800529e:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <vPortEnterCritical+0x54>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d10e      	bne.n	80052c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052a6:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <vPortEnterCritical+0x58>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d009      	beq.n	80052c4 <vPortEnterCritical+0x48>
 80052b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	603b      	str	r3, [r7, #0]
 80052c2:	e7fe      	b.n	80052c2 <vPortEnterCritical+0x46>
	}
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	2000000c 	.word	0x2000000c
 80052d4:	e000ed04 	.word	0xe000ed04

080052d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052de:	4b11      	ldr	r3, [pc, #68]	; (8005324 <vPortExitCritical+0x4c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d109      	bne.n	80052fa <vPortExitCritical+0x22>
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	607b      	str	r3, [r7, #4]
 80052f8:	e7fe      	b.n	80052f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80052fa:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <vPortExitCritical+0x4c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3b01      	subs	r3, #1
 8005300:	4a08      	ldr	r2, [pc, #32]	; (8005324 <vPortExitCritical+0x4c>)
 8005302:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005304:	4b07      	ldr	r3, [pc, #28]	; (8005324 <vPortExitCritical+0x4c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d104      	bne.n	8005316 <vPortExitCritical+0x3e>
 800530c:	2300      	movs	r3, #0
 800530e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	2000000c 	.word	0x2000000c
	...

08005330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005330:	f3ef 8009 	mrs	r0, PSP
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	4b15      	ldr	r3, [pc, #84]	; (8005390 <pxCurrentTCBConst>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	f01e 0f10 	tst.w	lr, #16
 8005340:	bf08      	it	eq
 8005342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534a:	6010      	str	r0, [r2, #0]
 800534c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005354:	f380 8811 	msr	BASEPRI, r0
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f7ff fcd4 	bl	8004d0c <vTaskSwitchContext>
 8005364:	f04f 0000 	mov.w	r0, #0
 8005368:	f380 8811 	msr	BASEPRI, r0
 800536c:	bc09      	pop	{r0, r3}
 800536e:	6819      	ldr	r1, [r3, #0]
 8005370:	6808      	ldr	r0, [r1, #0]
 8005372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005376:	f01e 0f10 	tst.w	lr, #16
 800537a:	bf08      	it	eq
 800537c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005380:	f380 8809 	msr	PSP, r0
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	f3af 8000 	nop.w

08005390 <pxCurrentTCBConst>:
 8005390:	200000c4 	.word	0x200000c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop

08005398 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053b0:	f7ff fbf4 	bl	8004b9c <xTaskIncrementTick>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053ba:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <xPortSysTickHandler+0x3c>)
 80053bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	2300      	movs	r3, #0
 80053c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	e000ed04 	.word	0xe000ed04

080053d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053dc:	4b0b      	ldr	r3, [pc, #44]	; (800540c <vPortSetupTimerInterrupt+0x34>)
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053e2:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <vPortSetupTimerInterrupt+0x38>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053e8:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <vPortSetupTimerInterrupt+0x3c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a0a      	ldr	r2, [pc, #40]	; (8005418 <vPortSetupTimerInterrupt+0x40>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	099b      	lsrs	r3, r3, #6
 80053f4:	4a09      	ldr	r2, [pc, #36]	; (800541c <vPortSetupTimerInterrupt+0x44>)
 80053f6:	3b01      	subs	r3, #1
 80053f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053fa:	4b04      	ldr	r3, [pc, #16]	; (800540c <vPortSetupTimerInterrupt+0x34>)
 80053fc:	2207      	movs	r2, #7
 80053fe:	601a      	str	r2, [r3, #0]
}
 8005400:	bf00      	nop
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	e000e010 	.word	0xe000e010
 8005410:	e000e018 	.word	0xe000e018
 8005414:	20000000 	.word	0x20000000
 8005418:	10624dd3 	.word	0x10624dd3
 800541c:	e000e014 	.word	0xe000e014

08005420 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005420:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005430 <vPortEnableVFP+0x10>
 8005424:	6801      	ldr	r1, [r0, #0]
 8005426:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800542a:	6001      	str	r1, [r0, #0]
 800542c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800542e:	bf00      	nop
 8005430:	e000ed88 	.word	0xe000ed88

08005434 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08a      	sub	sp, #40	; 0x28
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800543c:	2300      	movs	r3, #0
 800543e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005440:	f7ff fb02 	bl	8004a48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005444:	4b57      	ldr	r3, [pc, #348]	; (80055a4 <pvPortMalloc+0x170>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800544c:	f000 f90c 	bl	8005668 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005450:	4b55      	ldr	r3, [pc, #340]	; (80055a8 <pvPortMalloc+0x174>)
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4013      	ands	r3, r2
 8005458:	2b00      	cmp	r3, #0
 800545a:	f040 808c 	bne.w	8005576 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d01c      	beq.n	800549e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005464:	2208      	movs	r2, #8
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4413      	add	r3, r2
 800546a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	2b00      	cmp	r3, #0
 8005474:	d013      	beq.n	800549e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f023 0307 	bic.w	r3, r3, #7
 800547c:	3308      	adds	r3, #8
 800547e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	2b00      	cmp	r3, #0
 8005488:	d009      	beq.n	800549e <pvPortMalloc+0x6a>
	__asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	e7fe      	b.n	800549c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d068      	beq.n	8005576 <pvPortMalloc+0x142>
 80054a4:	4b41      	ldr	r3, [pc, #260]	; (80055ac <pvPortMalloc+0x178>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d863      	bhi.n	8005576 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054ae:	4b40      	ldr	r3, [pc, #256]	; (80055b0 <pvPortMalloc+0x17c>)
 80054b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80054b2:	4b3f      	ldr	r3, [pc, #252]	; (80055b0 <pvPortMalloc+0x17c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054b8:	e004      	b.n	80054c4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d903      	bls.n	80054d6 <pvPortMalloc+0xa2>
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1f1      	bne.n	80054ba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054d6:	4b33      	ldr	r3, [pc, #204]	; (80055a4 <pvPortMalloc+0x170>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054dc:	429a      	cmp	r2, r3
 80054de:	d04a      	beq.n	8005576 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2208      	movs	r2, #8
 80054e6:	4413      	add	r3, r2
 80054e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	1ad2      	subs	r2, r2, r3
 80054fa:	2308      	movs	r3, #8
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	429a      	cmp	r2, r3
 8005500:	d91e      	bls.n	8005540 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4413      	add	r3, r2
 8005508:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	2b00      	cmp	r3, #0
 8005512:	d009      	beq.n	8005528 <pvPortMalloc+0xf4>
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	e7fe      	b.n	8005526 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	1ad2      	subs	r2, r2, r3
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800553a:	69b8      	ldr	r0, [r7, #24]
 800553c:	f000 f8f6 	bl	800572c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005540:	4b1a      	ldr	r3, [pc, #104]	; (80055ac <pvPortMalloc+0x178>)
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	4a18      	ldr	r2, [pc, #96]	; (80055ac <pvPortMalloc+0x178>)
 800554c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800554e:	4b17      	ldr	r3, [pc, #92]	; (80055ac <pvPortMalloc+0x178>)
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4b18      	ldr	r3, [pc, #96]	; (80055b4 <pvPortMalloc+0x180>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	429a      	cmp	r2, r3
 8005558:	d203      	bcs.n	8005562 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800555a:	4b14      	ldr	r3, [pc, #80]	; (80055ac <pvPortMalloc+0x178>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a15      	ldr	r2, [pc, #84]	; (80055b4 <pvPortMalloc+0x180>)
 8005560:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	4b10      	ldr	r3, [pc, #64]	; (80055a8 <pvPortMalloc+0x174>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	431a      	orrs	r2, r3
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005576:	f7ff fa75 	bl	8004a64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	2b00      	cmp	r3, #0
 8005582:	d009      	beq.n	8005598 <pvPortMalloc+0x164>
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	e7fe      	b.n	8005596 <pvPortMalloc+0x162>
	return pvReturn;
 8005598:	69fb      	ldr	r3, [r7, #28]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3728      	adds	r7, #40	; 0x28
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	20000e00 	.word	0x20000e00
 80055a8:	20000e0c 	.word	0x20000e0c
 80055ac:	20000e04 	.word	0x20000e04
 80055b0:	20000df8 	.word	0x20000df8
 80055b4:	20000e08 	.word	0x20000e08

080055b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d046      	beq.n	8005658 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055ca:	2308      	movs	r3, #8
 80055cc:	425b      	negs	r3, r3
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	4413      	add	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	4b20      	ldr	r3, [pc, #128]	; (8005660 <vPortFree+0xa8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4013      	ands	r3, r2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d109      	bne.n	80055fa <vPortFree+0x42>
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	e7fe      	b.n	80055f8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d009      	beq.n	8005616 <vPortFree+0x5e>
 8005602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	60bb      	str	r3, [r7, #8]
 8005614:	e7fe      	b.n	8005614 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	4b11      	ldr	r3, [pc, #68]	; (8005660 <vPortFree+0xa8>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4013      	ands	r3, r2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d019      	beq.n	8005658 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d115      	bne.n	8005658 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <vPortFree+0xa8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	43db      	mvns	r3, r3
 8005636:	401a      	ands	r2, r3
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800563c:	f7ff fa04 	bl	8004a48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	4b07      	ldr	r3, [pc, #28]	; (8005664 <vPortFree+0xac>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4413      	add	r3, r2
 800564a:	4a06      	ldr	r2, [pc, #24]	; (8005664 <vPortFree+0xac>)
 800564c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800564e:	6938      	ldr	r0, [r7, #16]
 8005650:	f000 f86c 	bl	800572c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005654:	f7ff fa06 	bl	8004a64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005658:	bf00      	nop
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	20000e0c 	.word	0x20000e0c
 8005664:	20000e04 	.word	0x20000e04

08005668 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800566e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005672:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005674:	4b27      	ldr	r3, [pc, #156]	; (8005714 <prvHeapInit+0xac>)
 8005676:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00c      	beq.n	800569c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3307      	adds	r3, #7
 8005686:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0307 	bic.w	r3, r3, #7
 800568e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	4a1f      	ldr	r2, [pc, #124]	; (8005714 <prvHeapInit+0xac>)
 8005698:	4413      	add	r3, r2
 800569a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056a0:	4a1d      	ldr	r2, [pc, #116]	; (8005718 <prvHeapInit+0xb0>)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056a6:	4b1c      	ldr	r3, [pc, #112]	; (8005718 <prvHeapInit+0xb0>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	4413      	add	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056b4:	2208      	movs	r2, #8
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	1a9b      	subs	r3, r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0307 	bic.w	r3, r3, #7
 80056c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4a15      	ldr	r2, [pc, #84]	; (800571c <prvHeapInit+0xb4>)
 80056c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056ca:	4b14      	ldr	r3, [pc, #80]	; (800571c <prvHeapInit+0xb4>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2200      	movs	r2, #0
 80056d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056d2:	4b12      	ldr	r3, [pc, #72]	; (800571c <prvHeapInit+0xb4>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	1ad2      	subs	r2, r2, r3
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056e8:	4b0c      	ldr	r3, [pc, #48]	; (800571c <prvHeapInit+0xb4>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	4a0a      	ldr	r2, [pc, #40]	; (8005720 <prvHeapInit+0xb8>)
 80056f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	4a09      	ldr	r2, [pc, #36]	; (8005724 <prvHeapInit+0xbc>)
 80056fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005700:	4b09      	ldr	r3, [pc, #36]	; (8005728 <prvHeapInit+0xc0>)
 8005702:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005706:	601a      	str	r2, [r3, #0]
}
 8005708:	bf00      	nop
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	200001f8 	.word	0x200001f8
 8005718:	20000df8 	.word	0x20000df8
 800571c:	20000e00 	.word	0x20000e00
 8005720:	20000e08 	.word	0x20000e08
 8005724:	20000e04 	.word	0x20000e04
 8005728:	20000e0c 	.word	0x20000e0c

0800572c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005734:	4b28      	ldr	r3, [pc, #160]	; (80057d8 <prvInsertBlockIntoFreeList+0xac>)
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	e002      	b.n	8005740 <prvInsertBlockIntoFreeList+0x14>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	429a      	cmp	r2, r3
 8005748:	d8f7      	bhi.n	800573a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	4413      	add	r3, r2
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	429a      	cmp	r2, r3
 800575a:	d108      	bne.n	800576e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	441a      	add	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	441a      	add	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d118      	bne.n	80057b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	4b15      	ldr	r3, [pc, #84]	; (80057dc <prvInsertBlockIntoFreeList+0xb0>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d00d      	beq.n	80057aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	441a      	add	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	e008      	b.n	80057bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057aa:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <prvInsertBlockIntoFreeList+0xb0>)
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	e003      	b.n	80057bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d002      	beq.n	80057ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057ca:	bf00      	nop
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	20000df8 	.word	0x20000df8
 80057dc:	20000e00 	.word	0x20000e00

080057e0 <__errno>:
 80057e0:	4b01      	ldr	r3, [pc, #4]	; (80057e8 <__errno+0x8>)
 80057e2:	6818      	ldr	r0, [r3, #0]
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	20000010 	.word	0x20000010

080057ec <__libc_init_array>:
 80057ec:	b570      	push	{r4, r5, r6, lr}
 80057ee:	4e0d      	ldr	r6, [pc, #52]	; (8005824 <__libc_init_array+0x38>)
 80057f0:	4c0d      	ldr	r4, [pc, #52]	; (8005828 <__libc_init_array+0x3c>)
 80057f2:	1ba4      	subs	r4, r4, r6
 80057f4:	10a4      	asrs	r4, r4, #2
 80057f6:	2500      	movs	r5, #0
 80057f8:	42a5      	cmp	r5, r4
 80057fa:	d109      	bne.n	8005810 <__libc_init_array+0x24>
 80057fc:	4e0b      	ldr	r6, [pc, #44]	; (800582c <__libc_init_array+0x40>)
 80057fe:	4c0c      	ldr	r4, [pc, #48]	; (8005830 <__libc_init_array+0x44>)
 8005800:	f000 fc88 	bl	8006114 <_init>
 8005804:	1ba4      	subs	r4, r4, r6
 8005806:	10a4      	asrs	r4, r4, #2
 8005808:	2500      	movs	r5, #0
 800580a:	42a5      	cmp	r5, r4
 800580c:	d105      	bne.n	800581a <__libc_init_array+0x2e>
 800580e:	bd70      	pop	{r4, r5, r6, pc}
 8005810:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005814:	4798      	blx	r3
 8005816:	3501      	adds	r5, #1
 8005818:	e7ee      	b.n	80057f8 <__libc_init_array+0xc>
 800581a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800581e:	4798      	blx	r3
 8005820:	3501      	adds	r5, #1
 8005822:	e7f2      	b.n	800580a <__libc_init_array+0x1e>
 8005824:	08006220 	.word	0x08006220
 8005828:	08006220 	.word	0x08006220
 800582c:	08006220 	.word	0x08006220
 8005830:	08006224 	.word	0x08006224

08005834 <memset>:
 8005834:	4402      	add	r2, r0
 8005836:	4603      	mov	r3, r0
 8005838:	4293      	cmp	r3, r2
 800583a:	d100      	bne.n	800583e <memset+0xa>
 800583c:	4770      	bx	lr
 800583e:	f803 1b01 	strb.w	r1, [r3], #1
 8005842:	e7f9      	b.n	8005838 <memset+0x4>

08005844 <_puts_r>:
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	460e      	mov	r6, r1
 8005848:	4605      	mov	r5, r0
 800584a:	b118      	cbz	r0, 8005854 <_puts_r+0x10>
 800584c:	6983      	ldr	r3, [r0, #24]
 800584e:	b90b      	cbnz	r3, 8005854 <_puts_r+0x10>
 8005850:	f000 fa0c 	bl	8005c6c <__sinit>
 8005854:	69ab      	ldr	r3, [r5, #24]
 8005856:	68ac      	ldr	r4, [r5, #8]
 8005858:	b913      	cbnz	r3, 8005860 <_puts_r+0x1c>
 800585a:	4628      	mov	r0, r5
 800585c:	f000 fa06 	bl	8005c6c <__sinit>
 8005860:	4b23      	ldr	r3, [pc, #140]	; (80058f0 <_puts_r+0xac>)
 8005862:	429c      	cmp	r4, r3
 8005864:	d117      	bne.n	8005896 <_puts_r+0x52>
 8005866:	686c      	ldr	r4, [r5, #4]
 8005868:	89a3      	ldrh	r3, [r4, #12]
 800586a:	071b      	lsls	r3, r3, #28
 800586c:	d51d      	bpl.n	80058aa <_puts_r+0x66>
 800586e:	6923      	ldr	r3, [r4, #16]
 8005870:	b1db      	cbz	r3, 80058aa <_puts_r+0x66>
 8005872:	3e01      	subs	r6, #1
 8005874:	68a3      	ldr	r3, [r4, #8]
 8005876:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800587a:	3b01      	subs	r3, #1
 800587c:	60a3      	str	r3, [r4, #8]
 800587e:	b9e9      	cbnz	r1, 80058bc <_puts_r+0x78>
 8005880:	2b00      	cmp	r3, #0
 8005882:	da2e      	bge.n	80058e2 <_puts_r+0x9e>
 8005884:	4622      	mov	r2, r4
 8005886:	210a      	movs	r1, #10
 8005888:	4628      	mov	r0, r5
 800588a:	f000 f83f 	bl	800590c <__swbuf_r>
 800588e:	3001      	adds	r0, #1
 8005890:	d011      	beq.n	80058b6 <_puts_r+0x72>
 8005892:	200a      	movs	r0, #10
 8005894:	e011      	b.n	80058ba <_puts_r+0x76>
 8005896:	4b17      	ldr	r3, [pc, #92]	; (80058f4 <_puts_r+0xb0>)
 8005898:	429c      	cmp	r4, r3
 800589a:	d101      	bne.n	80058a0 <_puts_r+0x5c>
 800589c:	68ac      	ldr	r4, [r5, #8]
 800589e:	e7e3      	b.n	8005868 <_puts_r+0x24>
 80058a0:	4b15      	ldr	r3, [pc, #84]	; (80058f8 <_puts_r+0xb4>)
 80058a2:	429c      	cmp	r4, r3
 80058a4:	bf08      	it	eq
 80058a6:	68ec      	ldreq	r4, [r5, #12]
 80058a8:	e7de      	b.n	8005868 <_puts_r+0x24>
 80058aa:	4621      	mov	r1, r4
 80058ac:	4628      	mov	r0, r5
 80058ae:	f000 f87f 	bl	80059b0 <__swsetup_r>
 80058b2:	2800      	cmp	r0, #0
 80058b4:	d0dd      	beq.n	8005872 <_puts_r+0x2e>
 80058b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058ba:	bd70      	pop	{r4, r5, r6, pc}
 80058bc:	2b00      	cmp	r3, #0
 80058be:	da04      	bge.n	80058ca <_puts_r+0x86>
 80058c0:	69a2      	ldr	r2, [r4, #24]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	dc06      	bgt.n	80058d4 <_puts_r+0x90>
 80058c6:	290a      	cmp	r1, #10
 80058c8:	d004      	beq.n	80058d4 <_puts_r+0x90>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	6022      	str	r2, [r4, #0]
 80058d0:	7019      	strb	r1, [r3, #0]
 80058d2:	e7cf      	b.n	8005874 <_puts_r+0x30>
 80058d4:	4622      	mov	r2, r4
 80058d6:	4628      	mov	r0, r5
 80058d8:	f000 f818 	bl	800590c <__swbuf_r>
 80058dc:	3001      	adds	r0, #1
 80058de:	d1c9      	bne.n	8005874 <_puts_r+0x30>
 80058e0:	e7e9      	b.n	80058b6 <_puts_r+0x72>
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	200a      	movs	r0, #10
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	6022      	str	r2, [r4, #0]
 80058ea:	7018      	strb	r0, [r3, #0]
 80058ec:	e7e5      	b.n	80058ba <_puts_r+0x76>
 80058ee:	bf00      	nop
 80058f0:	080061d8 	.word	0x080061d8
 80058f4:	080061f8 	.word	0x080061f8
 80058f8:	080061b8 	.word	0x080061b8

080058fc <puts>:
 80058fc:	4b02      	ldr	r3, [pc, #8]	; (8005908 <puts+0xc>)
 80058fe:	4601      	mov	r1, r0
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	f7ff bf9f 	b.w	8005844 <_puts_r>
 8005906:	bf00      	nop
 8005908:	20000010 	.word	0x20000010

0800590c <__swbuf_r>:
 800590c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590e:	460e      	mov	r6, r1
 8005910:	4614      	mov	r4, r2
 8005912:	4605      	mov	r5, r0
 8005914:	b118      	cbz	r0, 800591e <__swbuf_r+0x12>
 8005916:	6983      	ldr	r3, [r0, #24]
 8005918:	b90b      	cbnz	r3, 800591e <__swbuf_r+0x12>
 800591a:	f000 f9a7 	bl	8005c6c <__sinit>
 800591e:	4b21      	ldr	r3, [pc, #132]	; (80059a4 <__swbuf_r+0x98>)
 8005920:	429c      	cmp	r4, r3
 8005922:	d12a      	bne.n	800597a <__swbuf_r+0x6e>
 8005924:	686c      	ldr	r4, [r5, #4]
 8005926:	69a3      	ldr	r3, [r4, #24]
 8005928:	60a3      	str	r3, [r4, #8]
 800592a:	89a3      	ldrh	r3, [r4, #12]
 800592c:	071a      	lsls	r2, r3, #28
 800592e:	d52e      	bpl.n	800598e <__swbuf_r+0x82>
 8005930:	6923      	ldr	r3, [r4, #16]
 8005932:	b363      	cbz	r3, 800598e <__swbuf_r+0x82>
 8005934:	6923      	ldr	r3, [r4, #16]
 8005936:	6820      	ldr	r0, [r4, #0]
 8005938:	1ac0      	subs	r0, r0, r3
 800593a:	6963      	ldr	r3, [r4, #20]
 800593c:	b2f6      	uxtb	r6, r6
 800593e:	4283      	cmp	r3, r0
 8005940:	4637      	mov	r7, r6
 8005942:	dc04      	bgt.n	800594e <__swbuf_r+0x42>
 8005944:	4621      	mov	r1, r4
 8005946:	4628      	mov	r0, r5
 8005948:	f000 f926 	bl	8005b98 <_fflush_r>
 800594c:	bb28      	cbnz	r0, 800599a <__swbuf_r+0x8e>
 800594e:	68a3      	ldr	r3, [r4, #8]
 8005950:	3b01      	subs	r3, #1
 8005952:	60a3      	str	r3, [r4, #8]
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	6022      	str	r2, [r4, #0]
 800595a:	701e      	strb	r6, [r3, #0]
 800595c:	6963      	ldr	r3, [r4, #20]
 800595e:	3001      	adds	r0, #1
 8005960:	4283      	cmp	r3, r0
 8005962:	d004      	beq.n	800596e <__swbuf_r+0x62>
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	07db      	lsls	r3, r3, #31
 8005968:	d519      	bpl.n	800599e <__swbuf_r+0x92>
 800596a:	2e0a      	cmp	r6, #10
 800596c:	d117      	bne.n	800599e <__swbuf_r+0x92>
 800596e:	4621      	mov	r1, r4
 8005970:	4628      	mov	r0, r5
 8005972:	f000 f911 	bl	8005b98 <_fflush_r>
 8005976:	b190      	cbz	r0, 800599e <__swbuf_r+0x92>
 8005978:	e00f      	b.n	800599a <__swbuf_r+0x8e>
 800597a:	4b0b      	ldr	r3, [pc, #44]	; (80059a8 <__swbuf_r+0x9c>)
 800597c:	429c      	cmp	r4, r3
 800597e:	d101      	bne.n	8005984 <__swbuf_r+0x78>
 8005980:	68ac      	ldr	r4, [r5, #8]
 8005982:	e7d0      	b.n	8005926 <__swbuf_r+0x1a>
 8005984:	4b09      	ldr	r3, [pc, #36]	; (80059ac <__swbuf_r+0xa0>)
 8005986:	429c      	cmp	r4, r3
 8005988:	bf08      	it	eq
 800598a:	68ec      	ldreq	r4, [r5, #12]
 800598c:	e7cb      	b.n	8005926 <__swbuf_r+0x1a>
 800598e:	4621      	mov	r1, r4
 8005990:	4628      	mov	r0, r5
 8005992:	f000 f80d 	bl	80059b0 <__swsetup_r>
 8005996:	2800      	cmp	r0, #0
 8005998:	d0cc      	beq.n	8005934 <__swbuf_r+0x28>
 800599a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800599e:	4638      	mov	r0, r7
 80059a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059a2:	bf00      	nop
 80059a4:	080061d8 	.word	0x080061d8
 80059a8:	080061f8 	.word	0x080061f8
 80059ac:	080061b8 	.word	0x080061b8

080059b0 <__swsetup_r>:
 80059b0:	4b32      	ldr	r3, [pc, #200]	; (8005a7c <__swsetup_r+0xcc>)
 80059b2:	b570      	push	{r4, r5, r6, lr}
 80059b4:	681d      	ldr	r5, [r3, #0]
 80059b6:	4606      	mov	r6, r0
 80059b8:	460c      	mov	r4, r1
 80059ba:	b125      	cbz	r5, 80059c6 <__swsetup_r+0x16>
 80059bc:	69ab      	ldr	r3, [r5, #24]
 80059be:	b913      	cbnz	r3, 80059c6 <__swsetup_r+0x16>
 80059c0:	4628      	mov	r0, r5
 80059c2:	f000 f953 	bl	8005c6c <__sinit>
 80059c6:	4b2e      	ldr	r3, [pc, #184]	; (8005a80 <__swsetup_r+0xd0>)
 80059c8:	429c      	cmp	r4, r3
 80059ca:	d10f      	bne.n	80059ec <__swsetup_r+0x3c>
 80059cc:	686c      	ldr	r4, [r5, #4]
 80059ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	0715      	lsls	r5, r2, #28
 80059d6:	d42c      	bmi.n	8005a32 <__swsetup_r+0x82>
 80059d8:	06d0      	lsls	r0, r2, #27
 80059da:	d411      	bmi.n	8005a00 <__swsetup_r+0x50>
 80059dc:	2209      	movs	r2, #9
 80059de:	6032      	str	r2, [r6, #0]
 80059e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059e4:	81a3      	strh	r3, [r4, #12]
 80059e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059ea:	e03e      	b.n	8005a6a <__swsetup_r+0xba>
 80059ec:	4b25      	ldr	r3, [pc, #148]	; (8005a84 <__swsetup_r+0xd4>)
 80059ee:	429c      	cmp	r4, r3
 80059f0:	d101      	bne.n	80059f6 <__swsetup_r+0x46>
 80059f2:	68ac      	ldr	r4, [r5, #8]
 80059f4:	e7eb      	b.n	80059ce <__swsetup_r+0x1e>
 80059f6:	4b24      	ldr	r3, [pc, #144]	; (8005a88 <__swsetup_r+0xd8>)
 80059f8:	429c      	cmp	r4, r3
 80059fa:	bf08      	it	eq
 80059fc:	68ec      	ldreq	r4, [r5, #12]
 80059fe:	e7e6      	b.n	80059ce <__swsetup_r+0x1e>
 8005a00:	0751      	lsls	r1, r2, #29
 8005a02:	d512      	bpl.n	8005a2a <__swsetup_r+0x7a>
 8005a04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a06:	b141      	cbz	r1, 8005a1a <__swsetup_r+0x6a>
 8005a08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a0c:	4299      	cmp	r1, r3
 8005a0e:	d002      	beq.n	8005a16 <__swsetup_r+0x66>
 8005a10:	4630      	mov	r0, r6
 8005a12:	f000 fa19 	bl	8005e48 <_free_r>
 8005a16:	2300      	movs	r3, #0
 8005a18:	6363      	str	r3, [r4, #52]	; 0x34
 8005a1a:	89a3      	ldrh	r3, [r4, #12]
 8005a1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a20:	81a3      	strh	r3, [r4, #12]
 8005a22:	2300      	movs	r3, #0
 8005a24:	6063      	str	r3, [r4, #4]
 8005a26:	6923      	ldr	r3, [r4, #16]
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	89a3      	ldrh	r3, [r4, #12]
 8005a2c:	f043 0308 	orr.w	r3, r3, #8
 8005a30:	81a3      	strh	r3, [r4, #12]
 8005a32:	6923      	ldr	r3, [r4, #16]
 8005a34:	b94b      	cbnz	r3, 8005a4a <__swsetup_r+0x9a>
 8005a36:	89a3      	ldrh	r3, [r4, #12]
 8005a38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a40:	d003      	beq.n	8005a4a <__swsetup_r+0x9a>
 8005a42:	4621      	mov	r1, r4
 8005a44:	4630      	mov	r0, r6
 8005a46:	f000 f9bf 	bl	8005dc8 <__smakebuf_r>
 8005a4a:	89a2      	ldrh	r2, [r4, #12]
 8005a4c:	f012 0301 	ands.w	r3, r2, #1
 8005a50:	d00c      	beq.n	8005a6c <__swsetup_r+0xbc>
 8005a52:	2300      	movs	r3, #0
 8005a54:	60a3      	str	r3, [r4, #8]
 8005a56:	6963      	ldr	r3, [r4, #20]
 8005a58:	425b      	negs	r3, r3
 8005a5a:	61a3      	str	r3, [r4, #24]
 8005a5c:	6923      	ldr	r3, [r4, #16]
 8005a5e:	b953      	cbnz	r3, 8005a76 <__swsetup_r+0xc6>
 8005a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a64:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005a68:	d1ba      	bne.n	80059e0 <__swsetup_r+0x30>
 8005a6a:	bd70      	pop	{r4, r5, r6, pc}
 8005a6c:	0792      	lsls	r2, r2, #30
 8005a6e:	bf58      	it	pl
 8005a70:	6963      	ldrpl	r3, [r4, #20]
 8005a72:	60a3      	str	r3, [r4, #8]
 8005a74:	e7f2      	b.n	8005a5c <__swsetup_r+0xac>
 8005a76:	2000      	movs	r0, #0
 8005a78:	e7f7      	b.n	8005a6a <__swsetup_r+0xba>
 8005a7a:	bf00      	nop
 8005a7c:	20000010 	.word	0x20000010
 8005a80:	080061d8 	.word	0x080061d8
 8005a84:	080061f8 	.word	0x080061f8
 8005a88:	080061b8 	.word	0x080061b8

08005a8c <__sflush_r>:
 8005a8c:	898a      	ldrh	r2, [r1, #12]
 8005a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a92:	4605      	mov	r5, r0
 8005a94:	0710      	lsls	r0, r2, #28
 8005a96:	460c      	mov	r4, r1
 8005a98:	d458      	bmi.n	8005b4c <__sflush_r+0xc0>
 8005a9a:	684b      	ldr	r3, [r1, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	dc05      	bgt.n	8005aac <__sflush_r+0x20>
 8005aa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	dc02      	bgt.n	8005aac <__sflush_r+0x20>
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005aae:	2e00      	cmp	r6, #0
 8005ab0:	d0f9      	beq.n	8005aa6 <__sflush_r+0x1a>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ab8:	682f      	ldr	r7, [r5, #0]
 8005aba:	6a21      	ldr	r1, [r4, #32]
 8005abc:	602b      	str	r3, [r5, #0]
 8005abe:	d032      	beq.n	8005b26 <__sflush_r+0x9a>
 8005ac0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ac2:	89a3      	ldrh	r3, [r4, #12]
 8005ac4:	075a      	lsls	r2, r3, #29
 8005ac6:	d505      	bpl.n	8005ad4 <__sflush_r+0x48>
 8005ac8:	6863      	ldr	r3, [r4, #4]
 8005aca:	1ac0      	subs	r0, r0, r3
 8005acc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ace:	b10b      	cbz	r3, 8005ad4 <__sflush_r+0x48>
 8005ad0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ad2:	1ac0      	subs	r0, r0, r3
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ada:	6a21      	ldr	r1, [r4, #32]
 8005adc:	4628      	mov	r0, r5
 8005ade:	47b0      	blx	r6
 8005ae0:	1c43      	adds	r3, r0, #1
 8005ae2:	89a3      	ldrh	r3, [r4, #12]
 8005ae4:	d106      	bne.n	8005af4 <__sflush_r+0x68>
 8005ae6:	6829      	ldr	r1, [r5, #0]
 8005ae8:	291d      	cmp	r1, #29
 8005aea:	d848      	bhi.n	8005b7e <__sflush_r+0xf2>
 8005aec:	4a29      	ldr	r2, [pc, #164]	; (8005b94 <__sflush_r+0x108>)
 8005aee:	40ca      	lsrs	r2, r1
 8005af0:	07d6      	lsls	r6, r2, #31
 8005af2:	d544      	bpl.n	8005b7e <__sflush_r+0xf2>
 8005af4:	2200      	movs	r2, #0
 8005af6:	6062      	str	r2, [r4, #4]
 8005af8:	04d9      	lsls	r1, r3, #19
 8005afa:	6922      	ldr	r2, [r4, #16]
 8005afc:	6022      	str	r2, [r4, #0]
 8005afe:	d504      	bpl.n	8005b0a <__sflush_r+0x7e>
 8005b00:	1c42      	adds	r2, r0, #1
 8005b02:	d101      	bne.n	8005b08 <__sflush_r+0x7c>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	b903      	cbnz	r3, 8005b0a <__sflush_r+0x7e>
 8005b08:	6560      	str	r0, [r4, #84]	; 0x54
 8005b0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b0c:	602f      	str	r7, [r5, #0]
 8005b0e:	2900      	cmp	r1, #0
 8005b10:	d0c9      	beq.n	8005aa6 <__sflush_r+0x1a>
 8005b12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b16:	4299      	cmp	r1, r3
 8005b18:	d002      	beq.n	8005b20 <__sflush_r+0x94>
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	f000 f994 	bl	8005e48 <_free_r>
 8005b20:	2000      	movs	r0, #0
 8005b22:	6360      	str	r0, [r4, #52]	; 0x34
 8005b24:	e7c0      	b.n	8005aa8 <__sflush_r+0x1c>
 8005b26:	2301      	movs	r3, #1
 8005b28:	4628      	mov	r0, r5
 8005b2a:	47b0      	blx	r6
 8005b2c:	1c41      	adds	r1, r0, #1
 8005b2e:	d1c8      	bne.n	8005ac2 <__sflush_r+0x36>
 8005b30:	682b      	ldr	r3, [r5, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0c5      	beq.n	8005ac2 <__sflush_r+0x36>
 8005b36:	2b1d      	cmp	r3, #29
 8005b38:	d001      	beq.n	8005b3e <__sflush_r+0xb2>
 8005b3a:	2b16      	cmp	r3, #22
 8005b3c:	d101      	bne.n	8005b42 <__sflush_r+0xb6>
 8005b3e:	602f      	str	r7, [r5, #0]
 8005b40:	e7b1      	b.n	8005aa6 <__sflush_r+0x1a>
 8005b42:	89a3      	ldrh	r3, [r4, #12]
 8005b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b48:	81a3      	strh	r3, [r4, #12]
 8005b4a:	e7ad      	b.n	8005aa8 <__sflush_r+0x1c>
 8005b4c:	690f      	ldr	r7, [r1, #16]
 8005b4e:	2f00      	cmp	r7, #0
 8005b50:	d0a9      	beq.n	8005aa6 <__sflush_r+0x1a>
 8005b52:	0793      	lsls	r3, r2, #30
 8005b54:	680e      	ldr	r6, [r1, #0]
 8005b56:	bf08      	it	eq
 8005b58:	694b      	ldreq	r3, [r1, #20]
 8005b5a:	600f      	str	r7, [r1, #0]
 8005b5c:	bf18      	it	ne
 8005b5e:	2300      	movne	r3, #0
 8005b60:	eba6 0807 	sub.w	r8, r6, r7
 8005b64:	608b      	str	r3, [r1, #8]
 8005b66:	f1b8 0f00 	cmp.w	r8, #0
 8005b6a:	dd9c      	ble.n	8005aa6 <__sflush_r+0x1a>
 8005b6c:	4643      	mov	r3, r8
 8005b6e:	463a      	mov	r2, r7
 8005b70:	6a21      	ldr	r1, [r4, #32]
 8005b72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b74:	4628      	mov	r0, r5
 8005b76:	47b0      	blx	r6
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	dc06      	bgt.n	8005b8a <__sflush_r+0xfe>
 8005b7c:	89a3      	ldrh	r3, [r4, #12]
 8005b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b82:	81a3      	strh	r3, [r4, #12]
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b88:	e78e      	b.n	8005aa8 <__sflush_r+0x1c>
 8005b8a:	4407      	add	r7, r0
 8005b8c:	eba8 0800 	sub.w	r8, r8, r0
 8005b90:	e7e9      	b.n	8005b66 <__sflush_r+0xda>
 8005b92:	bf00      	nop
 8005b94:	20400001 	.word	0x20400001

08005b98 <_fflush_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	690b      	ldr	r3, [r1, #16]
 8005b9c:	4605      	mov	r5, r0
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	b1db      	cbz	r3, 8005bda <_fflush_r+0x42>
 8005ba2:	b118      	cbz	r0, 8005bac <_fflush_r+0x14>
 8005ba4:	6983      	ldr	r3, [r0, #24]
 8005ba6:	b90b      	cbnz	r3, 8005bac <_fflush_r+0x14>
 8005ba8:	f000 f860 	bl	8005c6c <__sinit>
 8005bac:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <_fflush_r+0x48>)
 8005bae:	429c      	cmp	r4, r3
 8005bb0:	d109      	bne.n	8005bc6 <_fflush_r+0x2e>
 8005bb2:	686c      	ldr	r4, [r5, #4]
 8005bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bb8:	b17b      	cbz	r3, 8005bda <_fflush_r+0x42>
 8005bba:	4621      	mov	r1, r4
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bc2:	f7ff bf63 	b.w	8005a8c <__sflush_r>
 8005bc6:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <_fflush_r+0x4c>)
 8005bc8:	429c      	cmp	r4, r3
 8005bca:	d101      	bne.n	8005bd0 <_fflush_r+0x38>
 8005bcc:	68ac      	ldr	r4, [r5, #8]
 8005bce:	e7f1      	b.n	8005bb4 <_fflush_r+0x1c>
 8005bd0:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <_fflush_r+0x50>)
 8005bd2:	429c      	cmp	r4, r3
 8005bd4:	bf08      	it	eq
 8005bd6:	68ec      	ldreq	r4, [r5, #12]
 8005bd8:	e7ec      	b.n	8005bb4 <_fflush_r+0x1c>
 8005bda:	2000      	movs	r0, #0
 8005bdc:	bd38      	pop	{r3, r4, r5, pc}
 8005bde:	bf00      	nop
 8005be0:	080061d8 	.word	0x080061d8
 8005be4:	080061f8 	.word	0x080061f8
 8005be8:	080061b8 	.word	0x080061b8

08005bec <std>:
 8005bec:	2300      	movs	r3, #0
 8005bee:	b510      	push	{r4, lr}
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	e9c0 3300 	strd	r3, r3, [r0]
 8005bf6:	6083      	str	r3, [r0, #8]
 8005bf8:	8181      	strh	r1, [r0, #12]
 8005bfa:	6643      	str	r3, [r0, #100]	; 0x64
 8005bfc:	81c2      	strh	r2, [r0, #14]
 8005bfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c02:	6183      	str	r3, [r0, #24]
 8005c04:	4619      	mov	r1, r3
 8005c06:	2208      	movs	r2, #8
 8005c08:	305c      	adds	r0, #92	; 0x5c
 8005c0a:	f7ff fe13 	bl	8005834 <memset>
 8005c0e:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <std+0x38>)
 8005c10:	6263      	str	r3, [r4, #36]	; 0x24
 8005c12:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <std+0x3c>)
 8005c14:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c16:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <std+0x40>)
 8005c18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c1a:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <std+0x44>)
 8005c1c:	6224      	str	r4, [r4, #32]
 8005c1e:	6323      	str	r3, [r4, #48]	; 0x30
 8005c20:	bd10      	pop	{r4, pc}
 8005c22:	bf00      	nop
 8005c24:	08005fb9 	.word	0x08005fb9
 8005c28:	08005fdb 	.word	0x08005fdb
 8005c2c:	08006013 	.word	0x08006013
 8005c30:	08006037 	.word	0x08006037

08005c34 <_cleanup_r>:
 8005c34:	4901      	ldr	r1, [pc, #4]	; (8005c3c <_cleanup_r+0x8>)
 8005c36:	f000 b885 	b.w	8005d44 <_fwalk_reent>
 8005c3a:	bf00      	nop
 8005c3c:	08005b99 	.word	0x08005b99

08005c40 <__sfmoreglue>:
 8005c40:	b570      	push	{r4, r5, r6, lr}
 8005c42:	1e4a      	subs	r2, r1, #1
 8005c44:	2568      	movs	r5, #104	; 0x68
 8005c46:	4355      	muls	r5, r2
 8005c48:	460e      	mov	r6, r1
 8005c4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c4e:	f000 f949 	bl	8005ee4 <_malloc_r>
 8005c52:	4604      	mov	r4, r0
 8005c54:	b140      	cbz	r0, 8005c68 <__sfmoreglue+0x28>
 8005c56:	2100      	movs	r1, #0
 8005c58:	e9c0 1600 	strd	r1, r6, [r0]
 8005c5c:	300c      	adds	r0, #12
 8005c5e:	60a0      	str	r0, [r4, #8]
 8005c60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c64:	f7ff fde6 	bl	8005834 <memset>
 8005c68:	4620      	mov	r0, r4
 8005c6a:	bd70      	pop	{r4, r5, r6, pc}

08005c6c <__sinit>:
 8005c6c:	6983      	ldr	r3, [r0, #24]
 8005c6e:	b510      	push	{r4, lr}
 8005c70:	4604      	mov	r4, r0
 8005c72:	bb33      	cbnz	r3, 8005cc2 <__sinit+0x56>
 8005c74:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005c78:	6503      	str	r3, [r0, #80]	; 0x50
 8005c7a:	4b12      	ldr	r3, [pc, #72]	; (8005cc4 <__sinit+0x58>)
 8005c7c:	4a12      	ldr	r2, [pc, #72]	; (8005cc8 <__sinit+0x5c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6282      	str	r2, [r0, #40]	; 0x28
 8005c82:	4298      	cmp	r0, r3
 8005c84:	bf04      	itt	eq
 8005c86:	2301      	moveq	r3, #1
 8005c88:	6183      	streq	r3, [r0, #24]
 8005c8a:	f000 f81f 	bl	8005ccc <__sfp>
 8005c8e:	6060      	str	r0, [r4, #4]
 8005c90:	4620      	mov	r0, r4
 8005c92:	f000 f81b 	bl	8005ccc <__sfp>
 8005c96:	60a0      	str	r0, [r4, #8]
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f000 f817 	bl	8005ccc <__sfp>
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	60e0      	str	r0, [r4, #12]
 8005ca2:	2104      	movs	r1, #4
 8005ca4:	6860      	ldr	r0, [r4, #4]
 8005ca6:	f7ff ffa1 	bl	8005bec <std>
 8005caa:	2201      	movs	r2, #1
 8005cac:	2109      	movs	r1, #9
 8005cae:	68a0      	ldr	r0, [r4, #8]
 8005cb0:	f7ff ff9c 	bl	8005bec <std>
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	2112      	movs	r1, #18
 8005cb8:	68e0      	ldr	r0, [r4, #12]
 8005cba:	f7ff ff97 	bl	8005bec <std>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	61a3      	str	r3, [r4, #24]
 8005cc2:	bd10      	pop	{r4, pc}
 8005cc4:	080061b4 	.word	0x080061b4
 8005cc8:	08005c35 	.word	0x08005c35

08005ccc <__sfp>:
 8005ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cce:	4b1b      	ldr	r3, [pc, #108]	; (8005d3c <__sfp+0x70>)
 8005cd0:	681e      	ldr	r6, [r3, #0]
 8005cd2:	69b3      	ldr	r3, [r6, #24]
 8005cd4:	4607      	mov	r7, r0
 8005cd6:	b913      	cbnz	r3, 8005cde <__sfp+0x12>
 8005cd8:	4630      	mov	r0, r6
 8005cda:	f7ff ffc7 	bl	8005c6c <__sinit>
 8005cde:	3648      	adds	r6, #72	; 0x48
 8005ce0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	d503      	bpl.n	8005cf0 <__sfp+0x24>
 8005ce8:	6833      	ldr	r3, [r6, #0]
 8005cea:	b133      	cbz	r3, 8005cfa <__sfp+0x2e>
 8005cec:	6836      	ldr	r6, [r6, #0]
 8005cee:	e7f7      	b.n	8005ce0 <__sfp+0x14>
 8005cf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005cf4:	b16d      	cbz	r5, 8005d12 <__sfp+0x46>
 8005cf6:	3468      	adds	r4, #104	; 0x68
 8005cf8:	e7f4      	b.n	8005ce4 <__sfp+0x18>
 8005cfa:	2104      	movs	r1, #4
 8005cfc:	4638      	mov	r0, r7
 8005cfe:	f7ff ff9f 	bl	8005c40 <__sfmoreglue>
 8005d02:	6030      	str	r0, [r6, #0]
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d1f1      	bne.n	8005cec <__sfp+0x20>
 8005d08:	230c      	movs	r3, #12
 8005d0a:	603b      	str	r3, [r7, #0]
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	4620      	mov	r0, r4
 8005d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d12:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <__sfp+0x74>)
 8005d14:	6665      	str	r5, [r4, #100]	; 0x64
 8005d16:	e9c4 5500 	strd	r5, r5, [r4]
 8005d1a:	60a5      	str	r5, [r4, #8]
 8005d1c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005d20:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005d24:	2208      	movs	r2, #8
 8005d26:	4629      	mov	r1, r5
 8005d28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d2c:	f7ff fd82 	bl	8005834 <memset>
 8005d30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d38:	e7e9      	b.n	8005d0e <__sfp+0x42>
 8005d3a:	bf00      	nop
 8005d3c:	080061b4 	.word	0x080061b4
 8005d40:	ffff0001 	.word	0xffff0001

08005d44 <_fwalk_reent>:
 8005d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d48:	4680      	mov	r8, r0
 8005d4a:	4689      	mov	r9, r1
 8005d4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d50:	2600      	movs	r6, #0
 8005d52:	b914      	cbnz	r4, 8005d5a <_fwalk_reent+0x16>
 8005d54:	4630      	mov	r0, r6
 8005d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d5a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005d5e:	3f01      	subs	r7, #1
 8005d60:	d501      	bpl.n	8005d66 <_fwalk_reent+0x22>
 8005d62:	6824      	ldr	r4, [r4, #0]
 8005d64:	e7f5      	b.n	8005d52 <_fwalk_reent+0xe>
 8005d66:	89ab      	ldrh	r3, [r5, #12]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d907      	bls.n	8005d7c <_fwalk_reent+0x38>
 8005d6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d70:	3301      	adds	r3, #1
 8005d72:	d003      	beq.n	8005d7c <_fwalk_reent+0x38>
 8005d74:	4629      	mov	r1, r5
 8005d76:	4640      	mov	r0, r8
 8005d78:	47c8      	blx	r9
 8005d7a:	4306      	orrs	r6, r0
 8005d7c:	3568      	adds	r5, #104	; 0x68
 8005d7e:	e7ee      	b.n	8005d5e <_fwalk_reent+0x1a>

08005d80 <__swhatbuf_r>:
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	460e      	mov	r6, r1
 8005d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d88:	2900      	cmp	r1, #0
 8005d8a:	b096      	sub	sp, #88	; 0x58
 8005d8c:	4614      	mov	r4, r2
 8005d8e:	461d      	mov	r5, r3
 8005d90:	da07      	bge.n	8005da2 <__swhatbuf_r+0x22>
 8005d92:	2300      	movs	r3, #0
 8005d94:	602b      	str	r3, [r5, #0]
 8005d96:	89b3      	ldrh	r3, [r6, #12]
 8005d98:	061a      	lsls	r2, r3, #24
 8005d9a:	d410      	bmi.n	8005dbe <__swhatbuf_r+0x3e>
 8005d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005da0:	e00e      	b.n	8005dc0 <__swhatbuf_r+0x40>
 8005da2:	466a      	mov	r2, sp
 8005da4:	f000 f96e 	bl	8006084 <_fstat_r>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	dbf2      	blt.n	8005d92 <__swhatbuf_r+0x12>
 8005dac:	9a01      	ldr	r2, [sp, #4]
 8005dae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005db2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005db6:	425a      	negs	r2, r3
 8005db8:	415a      	adcs	r2, r3
 8005dba:	602a      	str	r2, [r5, #0]
 8005dbc:	e7ee      	b.n	8005d9c <__swhatbuf_r+0x1c>
 8005dbe:	2340      	movs	r3, #64	; 0x40
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	6023      	str	r3, [r4, #0]
 8005dc4:	b016      	add	sp, #88	; 0x58
 8005dc6:	bd70      	pop	{r4, r5, r6, pc}

08005dc8 <__smakebuf_r>:
 8005dc8:	898b      	ldrh	r3, [r1, #12]
 8005dca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005dcc:	079d      	lsls	r5, r3, #30
 8005dce:	4606      	mov	r6, r0
 8005dd0:	460c      	mov	r4, r1
 8005dd2:	d507      	bpl.n	8005de4 <__smakebuf_r+0x1c>
 8005dd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	6123      	str	r3, [r4, #16]
 8005ddc:	2301      	movs	r3, #1
 8005dde:	6163      	str	r3, [r4, #20]
 8005de0:	b002      	add	sp, #8
 8005de2:	bd70      	pop	{r4, r5, r6, pc}
 8005de4:	ab01      	add	r3, sp, #4
 8005de6:	466a      	mov	r2, sp
 8005de8:	f7ff ffca 	bl	8005d80 <__swhatbuf_r>
 8005dec:	9900      	ldr	r1, [sp, #0]
 8005dee:	4605      	mov	r5, r0
 8005df0:	4630      	mov	r0, r6
 8005df2:	f000 f877 	bl	8005ee4 <_malloc_r>
 8005df6:	b948      	cbnz	r0, 8005e0c <__smakebuf_r+0x44>
 8005df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dfc:	059a      	lsls	r2, r3, #22
 8005dfe:	d4ef      	bmi.n	8005de0 <__smakebuf_r+0x18>
 8005e00:	f023 0303 	bic.w	r3, r3, #3
 8005e04:	f043 0302 	orr.w	r3, r3, #2
 8005e08:	81a3      	strh	r3, [r4, #12]
 8005e0a:	e7e3      	b.n	8005dd4 <__smakebuf_r+0xc>
 8005e0c:	4b0d      	ldr	r3, [pc, #52]	; (8005e44 <__smakebuf_r+0x7c>)
 8005e0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e10:	89a3      	ldrh	r3, [r4, #12]
 8005e12:	6020      	str	r0, [r4, #0]
 8005e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e18:	81a3      	strh	r3, [r4, #12]
 8005e1a:	9b00      	ldr	r3, [sp, #0]
 8005e1c:	6163      	str	r3, [r4, #20]
 8005e1e:	9b01      	ldr	r3, [sp, #4]
 8005e20:	6120      	str	r0, [r4, #16]
 8005e22:	b15b      	cbz	r3, 8005e3c <__smakebuf_r+0x74>
 8005e24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e28:	4630      	mov	r0, r6
 8005e2a:	f000 f93d 	bl	80060a8 <_isatty_r>
 8005e2e:	b128      	cbz	r0, 8005e3c <__smakebuf_r+0x74>
 8005e30:	89a3      	ldrh	r3, [r4, #12]
 8005e32:	f023 0303 	bic.w	r3, r3, #3
 8005e36:	f043 0301 	orr.w	r3, r3, #1
 8005e3a:	81a3      	strh	r3, [r4, #12]
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	431d      	orrs	r5, r3
 8005e40:	81a5      	strh	r5, [r4, #12]
 8005e42:	e7cd      	b.n	8005de0 <__smakebuf_r+0x18>
 8005e44:	08005c35 	.word	0x08005c35

08005e48 <_free_r>:
 8005e48:	b538      	push	{r3, r4, r5, lr}
 8005e4a:	4605      	mov	r5, r0
 8005e4c:	2900      	cmp	r1, #0
 8005e4e:	d045      	beq.n	8005edc <_free_r+0x94>
 8005e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e54:	1f0c      	subs	r4, r1, #4
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	bfb8      	it	lt
 8005e5a:	18e4      	addlt	r4, r4, r3
 8005e5c:	f000 f946 	bl	80060ec <__malloc_lock>
 8005e60:	4a1f      	ldr	r2, [pc, #124]	; (8005ee0 <_free_r+0x98>)
 8005e62:	6813      	ldr	r3, [r2, #0]
 8005e64:	4610      	mov	r0, r2
 8005e66:	b933      	cbnz	r3, 8005e76 <_free_r+0x2e>
 8005e68:	6063      	str	r3, [r4, #4]
 8005e6a:	6014      	str	r4, [r2, #0]
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e72:	f000 b93c 	b.w	80060ee <__malloc_unlock>
 8005e76:	42a3      	cmp	r3, r4
 8005e78:	d90c      	bls.n	8005e94 <_free_r+0x4c>
 8005e7a:	6821      	ldr	r1, [r4, #0]
 8005e7c:	1862      	adds	r2, r4, r1
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	bf04      	itt	eq
 8005e82:	681a      	ldreq	r2, [r3, #0]
 8005e84:	685b      	ldreq	r3, [r3, #4]
 8005e86:	6063      	str	r3, [r4, #4]
 8005e88:	bf04      	itt	eq
 8005e8a:	1852      	addeq	r2, r2, r1
 8005e8c:	6022      	streq	r2, [r4, #0]
 8005e8e:	6004      	str	r4, [r0, #0]
 8005e90:	e7ec      	b.n	8005e6c <_free_r+0x24>
 8005e92:	4613      	mov	r3, r2
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	b10a      	cbz	r2, 8005e9c <_free_r+0x54>
 8005e98:	42a2      	cmp	r2, r4
 8005e9a:	d9fa      	bls.n	8005e92 <_free_r+0x4a>
 8005e9c:	6819      	ldr	r1, [r3, #0]
 8005e9e:	1858      	adds	r0, r3, r1
 8005ea0:	42a0      	cmp	r0, r4
 8005ea2:	d10b      	bne.n	8005ebc <_free_r+0x74>
 8005ea4:	6820      	ldr	r0, [r4, #0]
 8005ea6:	4401      	add	r1, r0
 8005ea8:	1858      	adds	r0, r3, r1
 8005eaa:	4282      	cmp	r2, r0
 8005eac:	6019      	str	r1, [r3, #0]
 8005eae:	d1dd      	bne.n	8005e6c <_free_r+0x24>
 8005eb0:	6810      	ldr	r0, [r2, #0]
 8005eb2:	6852      	ldr	r2, [r2, #4]
 8005eb4:	605a      	str	r2, [r3, #4]
 8005eb6:	4401      	add	r1, r0
 8005eb8:	6019      	str	r1, [r3, #0]
 8005eba:	e7d7      	b.n	8005e6c <_free_r+0x24>
 8005ebc:	d902      	bls.n	8005ec4 <_free_r+0x7c>
 8005ebe:	230c      	movs	r3, #12
 8005ec0:	602b      	str	r3, [r5, #0]
 8005ec2:	e7d3      	b.n	8005e6c <_free_r+0x24>
 8005ec4:	6820      	ldr	r0, [r4, #0]
 8005ec6:	1821      	adds	r1, r4, r0
 8005ec8:	428a      	cmp	r2, r1
 8005eca:	bf04      	itt	eq
 8005ecc:	6811      	ldreq	r1, [r2, #0]
 8005ece:	6852      	ldreq	r2, [r2, #4]
 8005ed0:	6062      	str	r2, [r4, #4]
 8005ed2:	bf04      	itt	eq
 8005ed4:	1809      	addeq	r1, r1, r0
 8005ed6:	6021      	streq	r1, [r4, #0]
 8005ed8:	605c      	str	r4, [r3, #4]
 8005eda:	e7c7      	b.n	8005e6c <_free_r+0x24>
 8005edc:	bd38      	pop	{r3, r4, r5, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000e10 	.word	0x20000e10

08005ee4 <_malloc_r>:
 8005ee4:	b570      	push	{r4, r5, r6, lr}
 8005ee6:	1ccd      	adds	r5, r1, #3
 8005ee8:	f025 0503 	bic.w	r5, r5, #3
 8005eec:	3508      	adds	r5, #8
 8005eee:	2d0c      	cmp	r5, #12
 8005ef0:	bf38      	it	cc
 8005ef2:	250c      	movcc	r5, #12
 8005ef4:	2d00      	cmp	r5, #0
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	db01      	blt.n	8005efe <_malloc_r+0x1a>
 8005efa:	42a9      	cmp	r1, r5
 8005efc:	d903      	bls.n	8005f06 <_malloc_r+0x22>
 8005efe:	230c      	movs	r3, #12
 8005f00:	6033      	str	r3, [r6, #0]
 8005f02:	2000      	movs	r0, #0
 8005f04:	bd70      	pop	{r4, r5, r6, pc}
 8005f06:	f000 f8f1 	bl	80060ec <__malloc_lock>
 8005f0a:	4a21      	ldr	r2, [pc, #132]	; (8005f90 <_malloc_r+0xac>)
 8005f0c:	6814      	ldr	r4, [r2, #0]
 8005f0e:	4621      	mov	r1, r4
 8005f10:	b991      	cbnz	r1, 8005f38 <_malloc_r+0x54>
 8005f12:	4c20      	ldr	r4, [pc, #128]	; (8005f94 <_malloc_r+0xb0>)
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	b91b      	cbnz	r3, 8005f20 <_malloc_r+0x3c>
 8005f18:	4630      	mov	r0, r6
 8005f1a:	f000 f83d 	bl	8005f98 <_sbrk_r>
 8005f1e:	6020      	str	r0, [r4, #0]
 8005f20:	4629      	mov	r1, r5
 8005f22:	4630      	mov	r0, r6
 8005f24:	f000 f838 	bl	8005f98 <_sbrk_r>
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	d124      	bne.n	8005f76 <_malloc_r+0x92>
 8005f2c:	230c      	movs	r3, #12
 8005f2e:	6033      	str	r3, [r6, #0]
 8005f30:	4630      	mov	r0, r6
 8005f32:	f000 f8dc 	bl	80060ee <__malloc_unlock>
 8005f36:	e7e4      	b.n	8005f02 <_malloc_r+0x1e>
 8005f38:	680b      	ldr	r3, [r1, #0]
 8005f3a:	1b5b      	subs	r3, r3, r5
 8005f3c:	d418      	bmi.n	8005f70 <_malloc_r+0x8c>
 8005f3e:	2b0b      	cmp	r3, #11
 8005f40:	d90f      	bls.n	8005f62 <_malloc_r+0x7e>
 8005f42:	600b      	str	r3, [r1, #0]
 8005f44:	50cd      	str	r5, [r1, r3]
 8005f46:	18cc      	adds	r4, r1, r3
 8005f48:	4630      	mov	r0, r6
 8005f4a:	f000 f8d0 	bl	80060ee <__malloc_unlock>
 8005f4e:	f104 000b 	add.w	r0, r4, #11
 8005f52:	1d23      	adds	r3, r4, #4
 8005f54:	f020 0007 	bic.w	r0, r0, #7
 8005f58:	1ac3      	subs	r3, r0, r3
 8005f5a:	d0d3      	beq.n	8005f04 <_malloc_r+0x20>
 8005f5c:	425a      	negs	r2, r3
 8005f5e:	50e2      	str	r2, [r4, r3]
 8005f60:	e7d0      	b.n	8005f04 <_malloc_r+0x20>
 8005f62:	428c      	cmp	r4, r1
 8005f64:	684b      	ldr	r3, [r1, #4]
 8005f66:	bf16      	itet	ne
 8005f68:	6063      	strne	r3, [r4, #4]
 8005f6a:	6013      	streq	r3, [r2, #0]
 8005f6c:	460c      	movne	r4, r1
 8005f6e:	e7eb      	b.n	8005f48 <_malloc_r+0x64>
 8005f70:	460c      	mov	r4, r1
 8005f72:	6849      	ldr	r1, [r1, #4]
 8005f74:	e7cc      	b.n	8005f10 <_malloc_r+0x2c>
 8005f76:	1cc4      	adds	r4, r0, #3
 8005f78:	f024 0403 	bic.w	r4, r4, #3
 8005f7c:	42a0      	cmp	r0, r4
 8005f7e:	d005      	beq.n	8005f8c <_malloc_r+0xa8>
 8005f80:	1a21      	subs	r1, r4, r0
 8005f82:	4630      	mov	r0, r6
 8005f84:	f000 f808 	bl	8005f98 <_sbrk_r>
 8005f88:	3001      	adds	r0, #1
 8005f8a:	d0cf      	beq.n	8005f2c <_malloc_r+0x48>
 8005f8c:	6025      	str	r5, [r4, #0]
 8005f8e:	e7db      	b.n	8005f48 <_malloc_r+0x64>
 8005f90:	20000e10 	.word	0x20000e10
 8005f94:	20000e14 	.word	0x20000e14

08005f98 <_sbrk_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	4c06      	ldr	r4, [pc, #24]	; (8005fb4 <_sbrk_r+0x1c>)
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4605      	mov	r5, r0
 8005fa0:	4608      	mov	r0, r1
 8005fa2:	6023      	str	r3, [r4, #0]
 8005fa4:	f7fa fec4 	bl	8000d30 <_sbrk>
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	d102      	bne.n	8005fb2 <_sbrk_r+0x1a>
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	b103      	cbz	r3, 8005fb2 <_sbrk_r+0x1a>
 8005fb0:	602b      	str	r3, [r5, #0]
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	20000fd0 	.word	0x20000fd0

08005fb8 <__sread>:
 8005fb8:	b510      	push	{r4, lr}
 8005fba:	460c      	mov	r4, r1
 8005fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fc0:	f000 f896 	bl	80060f0 <_read_r>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	bfab      	itete	ge
 8005fc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fca:	89a3      	ldrhlt	r3, [r4, #12]
 8005fcc:	181b      	addge	r3, r3, r0
 8005fce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fd2:	bfac      	ite	ge
 8005fd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fd6:	81a3      	strhlt	r3, [r4, #12]
 8005fd8:	bd10      	pop	{r4, pc}

08005fda <__swrite>:
 8005fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fde:	461f      	mov	r7, r3
 8005fe0:	898b      	ldrh	r3, [r1, #12]
 8005fe2:	05db      	lsls	r3, r3, #23
 8005fe4:	4605      	mov	r5, r0
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	4616      	mov	r6, r2
 8005fea:	d505      	bpl.n	8005ff8 <__swrite+0x1e>
 8005fec:	2302      	movs	r3, #2
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ff4:	f000 f868 	bl	80060c8 <_lseek_r>
 8005ff8:	89a3      	ldrh	r3, [r4, #12]
 8005ffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ffe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006002:	81a3      	strh	r3, [r4, #12]
 8006004:	4632      	mov	r2, r6
 8006006:	463b      	mov	r3, r7
 8006008:	4628      	mov	r0, r5
 800600a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800600e:	f000 b817 	b.w	8006040 <_write_r>

08006012 <__sseek>:
 8006012:	b510      	push	{r4, lr}
 8006014:	460c      	mov	r4, r1
 8006016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800601a:	f000 f855 	bl	80060c8 <_lseek_r>
 800601e:	1c43      	adds	r3, r0, #1
 8006020:	89a3      	ldrh	r3, [r4, #12]
 8006022:	bf15      	itete	ne
 8006024:	6560      	strne	r0, [r4, #84]	; 0x54
 8006026:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800602a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800602e:	81a3      	strheq	r3, [r4, #12]
 8006030:	bf18      	it	ne
 8006032:	81a3      	strhne	r3, [r4, #12]
 8006034:	bd10      	pop	{r4, pc}

08006036 <__sclose>:
 8006036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800603a:	f000 b813 	b.w	8006064 <_close_r>
	...

08006040 <_write_r>:
 8006040:	b538      	push	{r3, r4, r5, lr}
 8006042:	4c07      	ldr	r4, [pc, #28]	; (8006060 <_write_r+0x20>)
 8006044:	4605      	mov	r5, r0
 8006046:	4608      	mov	r0, r1
 8006048:	4611      	mov	r1, r2
 800604a:	2200      	movs	r2, #0
 800604c:	6022      	str	r2, [r4, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	f7fa fe1d 	bl	8000c8e <_write>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	d102      	bne.n	800605e <_write_r+0x1e>
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	b103      	cbz	r3, 800605e <_write_r+0x1e>
 800605c:	602b      	str	r3, [r5, #0]
 800605e:	bd38      	pop	{r3, r4, r5, pc}
 8006060:	20000fd0 	.word	0x20000fd0

08006064 <_close_r>:
 8006064:	b538      	push	{r3, r4, r5, lr}
 8006066:	4c06      	ldr	r4, [pc, #24]	; (8006080 <_close_r+0x1c>)
 8006068:	2300      	movs	r3, #0
 800606a:	4605      	mov	r5, r0
 800606c:	4608      	mov	r0, r1
 800606e:	6023      	str	r3, [r4, #0]
 8006070:	f7fa fe29 	bl	8000cc6 <_close>
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	d102      	bne.n	800607e <_close_r+0x1a>
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	b103      	cbz	r3, 800607e <_close_r+0x1a>
 800607c:	602b      	str	r3, [r5, #0]
 800607e:	bd38      	pop	{r3, r4, r5, pc}
 8006080:	20000fd0 	.word	0x20000fd0

08006084 <_fstat_r>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	4c07      	ldr	r4, [pc, #28]	; (80060a4 <_fstat_r+0x20>)
 8006088:	2300      	movs	r3, #0
 800608a:	4605      	mov	r5, r0
 800608c:	4608      	mov	r0, r1
 800608e:	4611      	mov	r1, r2
 8006090:	6023      	str	r3, [r4, #0]
 8006092:	f7fa fe24 	bl	8000cde <_fstat>
 8006096:	1c43      	adds	r3, r0, #1
 8006098:	d102      	bne.n	80060a0 <_fstat_r+0x1c>
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	b103      	cbz	r3, 80060a0 <_fstat_r+0x1c>
 800609e:	602b      	str	r3, [r5, #0]
 80060a0:	bd38      	pop	{r3, r4, r5, pc}
 80060a2:	bf00      	nop
 80060a4:	20000fd0 	.word	0x20000fd0

080060a8 <_isatty_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	4c06      	ldr	r4, [pc, #24]	; (80060c4 <_isatty_r+0x1c>)
 80060ac:	2300      	movs	r3, #0
 80060ae:	4605      	mov	r5, r0
 80060b0:	4608      	mov	r0, r1
 80060b2:	6023      	str	r3, [r4, #0]
 80060b4:	f7fa fe23 	bl	8000cfe <_isatty>
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d102      	bne.n	80060c2 <_isatty_r+0x1a>
 80060bc:	6823      	ldr	r3, [r4, #0]
 80060be:	b103      	cbz	r3, 80060c2 <_isatty_r+0x1a>
 80060c0:	602b      	str	r3, [r5, #0]
 80060c2:	bd38      	pop	{r3, r4, r5, pc}
 80060c4:	20000fd0 	.word	0x20000fd0

080060c8 <_lseek_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	4c07      	ldr	r4, [pc, #28]	; (80060e8 <_lseek_r+0x20>)
 80060cc:	4605      	mov	r5, r0
 80060ce:	4608      	mov	r0, r1
 80060d0:	4611      	mov	r1, r2
 80060d2:	2200      	movs	r2, #0
 80060d4:	6022      	str	r2, [r4, #0]
 80060d6:	461a      	mov	r2, r3
 80060d8:	f7fa fe1c 	bl	8000d14 <_lseek>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	d102      	bne.n	80060e6 <_lseek_r+0x1e>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	b103      	cbz	r3, 80060e6 <_lseek_r+0x1e>
 80060e4:	602b      	str	r3, [r5, #0]
 80060e6:	bd38      	pop	{r3, r4, r5, pc}
 80060e8:	20000fd0 	.word	0x20000fd0

080060ec <__malloc_lock>:
 80060ec:	4770      	bx	lr

080060ee <__malloc_unlock>:
 80060ee:	4770      	bx	lr

080060f0 <_read_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	4c07      	ldr	r4, [pc, #28]	; (8006110 <_read_r+0x20>)
 80060f4:	4605      	mov	r5, r0
 80060f6:	4608      	mov	r0, r1
 80060f8:	4611      	mov	r1, r2
 80060fa:	2200      	movs	r2, #0
 80060fc:	6022      	str	r2, [r4, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	f7fa fda8 	bl	8000c54 <_read>
 8006104:	1c43      	adds	r3, r0, #1
 8006106:	d102      	bne.n	800610e <_read_r+0x1e>
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	b103      	cbz	r3, 800610e <_read_r+0x1e>
 800610c:	602b      	str	r3, [r5, #0]
 800610e:	bd38      	pop	{r3, r4, r5, pc}
 8006110:	20000fd0 	.word	0x20000fd0

08006114 <_init>:
 8006114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006116:	bf00      	nop
 8006118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800611a:	bc08      	pop	{r3}
 800611c:	469e      	mov	lr, r3
 800611e:	4770      	bx	lr

08006120 <_fini>:
 8006120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006122:	bf00      	nop
 8006124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006126:	bc08      	pop	{r3}
 8006128:	469e      	mov	lr, r3
 800612a:	4770      	bx	lr
